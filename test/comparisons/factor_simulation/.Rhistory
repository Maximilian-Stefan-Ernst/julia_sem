table(rbinom(5000, 15, .1))
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
nfact_vec <- c(3, 5)
nitem_vec <- c(5, 10, 20)#, 48)
nobs <- c(5000)
config <- tidyr::expand_grid(nfact_vec, nitem_vec, nobs)
readr::write_csv2(config, "config_factor.csv")
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = map(model, ~simulateData(.x, sample.nobs = 5000)))
####################### generate parameter estimates
results <- mutate(
results,
fits = pmap(results, ~with(list(...),
cfa(model, data, meanstructure = TRUE))))
results <- mutate(
results,
parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
parest,
str_c(
"parest/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
#######################
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
results <- mutate(
results,
data = pmap(data,  ~induce_missing(.x, 0.1)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
pacman::p_load(lavaan, microbenchmark, dplyr)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
data <- readr::read_rds("data.rds")
benchmarks <-
purrr::pmap_dfr(data,
~with(
list(...),
summary(microbenchmark(
cfa(model, data, meanstructure = TRUE,
missing = FIML), times = 1,
unit = "s"))))
benchmarks <-
purrr::pmap_dfr(data,
~with(
list(...),
summary(microbenchmark(
cfa(model, data, meanstructure = TRUE,
missing = "fiml"), times = 1,
unit = "s"))))
benchmarks
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
nfact_vec <- c(3, 5)
nitem_vec <- c(5, 10)#, 20, 48)
nobs <- c(5000)
config <- tidyr::expand_grid(nfact_vec, nitem_vec, nobs)
readr::write_csv2(config, "config_factor.csv")
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = map(model, ~simulateData(.x, sample.nobs = 5000)))
####################### generate parameter estimates
results <- mutate(
results,
fits = pmap(results, ~with(list(...),
cfa(model, data, meanstructure = TRUE))))
results <- mutate(
results,
parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
parest,
str_c(
"parest/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
#######################
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
pacman::p_load(lavaan, microbenchmark, dplyr)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
data <- readr::read_rds("data.rds")
benchmarks <-
purrr::pmap_dfr(data,
~with(
list(...),
summary(microbenchmark(
cfa(model, data, meanstructure = TRUE,
missing = "fiml"), times = 1,
unit = "s"))))
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
nfact_vec <- c(3, 5)
nitem_vec <- c(5, 10)#, 20, 48)
nobs <- c(300)
config <- tidyr::expand_grid(nfact_vec, nitem_vec, nobs)
readr::write_csv2(config, "config_factor.csv")
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
nfact_vec <- c(3, 5)
nitem_vec <- c(5, 10)#, 20, 48)
nobs <- c(300)
config <- tidyr::expand_grid(nfact_vec, nitem_vec, nobs)
readr::write_csv2(config, "config_factor.csv")
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = map(model, ~simulateData(.x, sample.nobs = 5000)))
####################### generate parameter estimates
results <- mutate(
results,
fits = pmap(results, ~with(list(...),
cfa(model, data, meanstructure = TRUE))))
results <- mutate(
results,
parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
parest,
str_c(
"parest/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
#######################
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
pacman::p_load(lavaan, microbenchmark, dplyr)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
data <- readr::read_rds("data.rds")
benchmarks <-
purrr::pmap_dfr(data,
~with(
list(...),
summary(microbenchmark(
cfa(model, data, meanstructure = TRUE,
missing = "fiml"), times = 1,
unit = "s"))))
benchmarks <-
bind_cols(
select(data, -c(model, data)),
select(benchmarks, -c(expr)))
readr::write_csv2(benchmarks, "benchmarks/benchmarks_lavaan.csv")
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = map(model, ~simulateData(.x, sample.nobs = 5000)))
####################### generate parameter estimates
results <- mutate(
results,
fits = pmap(results, ~with(list(...),
cfa(model, data, meanstructure = TRUE,
missing = "fiml"))))
results <- mutate(
results,
parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
parest,
str_c(
"parest/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
#######################
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = map(model, ~simulateData(.x, sample.nobs = 5000)))
####################### generate parameter estimates
results <- mutate(
results,
fits = pmap(results, ~with(list(...),
cfa(model, data, meanstructure = TRUE,
missing = "fiml"))))
results <- mutate(
results,
parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
parest,
str_c(
"parest/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
#######################
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
data
data$data[1]
results$data[1]
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
nfact_vec <- c(3, 5)
nitem_vec <- c(5, 10)#, 20, 48)
nobs <- c(300)
config <- tidyr::expand_grid(nfact_vec, nitem_vec, nobs)
readr::write_csv2(config, "config_factor.csv")
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = map(model, ~simulateData(.x, sample.nobs = 5000)))
####################### generate parameter estimates
results <- mutate(
results,
fits = pmap(results, ~with(list(...),
cfa(model, data, meanstructure = TRUE,
missing = "fiml"))))
results <- mutate(
results,
parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
parest,
str_c(
"parest/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
#######################
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
results$data
results
results$fits[[1]]
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = pmap(results,
~with(list(...),
simulateData(model, sample.nobs = nobs))))
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
####################### generate parameter estimates
# results <- mutate(
#   results,
#   fits = pmap(results, ~with(list(...),
#                              cfa(model, data, meanstructure = TRUE,
#                                  missing = "fiml"))))
#
# results <- mutate(
#   results,
#   parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
#
# pwalk(results,
#       ~with(
#         list(...),
#         arrow::write_arrow(
#           parest,
#           str_c(
#             "parest/",
#             "nfact_",
#             nfact_vec,
#             "_nitem_",
#             nitem_vec,
#             ".arrow")
#         )
#       )
# )
#######################
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
results
results$data[1]
