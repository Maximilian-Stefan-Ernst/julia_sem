# residual variances
resVars <- mxPath( from=unlist(observed_vars), arrows=2,
free=TRUE,
values=lav_start[res_ind],
labels=str_c("e", 1:nobs) )
latVars <- mxPath( lat_vars, arrows=2, connect="single",
free=TRUE, values = rep(0.05, nfact))
load_ind
pacman::p_load(OpenMx, tidyverse, arrow, microbenchmark)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
source("factor_functions.R")
mxOption(NULL, "Default optimizer", "NPSOL")
mxOption(NULL, "Calculate Hessian", "No")
mxOption(NULL, "Standard Errors", "No")
results <- readr::read_rds("data.rds")
results <- mutate(
results,
omx_model =
pmap(results,
~with(
list(...),
gen_model_omx(nfact_vec, nitem_vec, data, starting_values$est)))
)
source("factor_functions.R")
mxOption(NULL, "Default optimizer", "NPSOL")
mxOption(NULL, "Calculate Hessian", "No")
mxOption(NULL, "Standard Errors", "No")
results <- readr::read_rds("data.rds")
results <- mutate(
results,
omx_model =
pmap(results,
~with(
list(...),
gen_model_omx(nfact_vec, nitem_vec, data, starting_values$est)))
)
benchmarks <-
purrr::pmap_dfr(
results,
~with(list(...),
summary(microbenchmark(
mxRun(omx_model), times = 1, unit = "s"))))
pacman::p_load(OpenMx, tidyverse, arrow, microbenchmark)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
source("factor_functions.R")
mxOption(NULL, "Default optimizer", "NPSOL")
mxOption(NULL, "Calculate Hessian", "No")
mxOption(NULL, "Standard Errors", "No")
results <- readr::read_rds("data.rds")
results <- mutate(
results,
omx_model =
pmap(results,
~with(
list(...),
gen_model_omx(nfact_vec, nitem_vec, data, starting_values$est)))
)
benchmarks <-
purrr::pmap_dfr(
results,
~with(list(...),
summary(microbenchmark(
mxRun(omx_model), times = 1, unit = "s"))))
benchmarks <-
bind_cols(
select(results, nfact_vec, nitem_vec, nobs),
select(benchmarks, -c(expr)))
readr::write_csv2(benchmarks, "benchmarks/benchmarks_omx.csv")
data <- readr::read_rds("data.rds")
summary(data$fits[[1]])
data$fits[[1]]
summary(data$fits[[1]])
library(lavaan)
summary(data$fits[[1]])
results <- readr::read_rds("data.rds")
results <- mutate(
results,
omx_model =
pmap(results,
~with(
list(...),
gen_model_omx(nfact_vec, nitem_vec, data, starting_values$est)))
)
fit_omx <- mxRun(results$omx_model[[1]])
fit_omx
View(fit_omx)
summary(fit_omx)
summary(data$fits[[1]], standardized = true)
summary(data$fits[[1]], standardized = T)
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = pmap(results,
~with(list(...),
simulateData(model,
sample.nobs = nobs,
orthogonal = TRUE,
std.lv = TRUE))))
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
####################### generate parameter estimates
results <- mutate(
results,
starting_values =
pmap(results,
~with(list(...),
parameterEstimates(cfa(model, data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE, do.fit = FALSE,
std.lv = TRUE)))))
results <- mutate(
results,
fits = pmap(results, ~with(list(...),
cfa(model, data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE))))
results <- mutate(
results,
parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
parest,
str_c(
"parest/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
#######################
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
pacman::p_load(lavaan, microbenchmark, dplyr)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
data <- readr::read_rds("data.rds")
benchmarks <-
purrr::pmap_dfr(data,
~with(
list(...),
summary(microbenchmark(
cfa(model, data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE), times = 1,
unit = "s"))))
benchmarks <-
bind_cols(
select(results, nfact_vec, nitem_vec, nobs),
select(benchmarks, -c(expr)))
readr::write_csv2(benchmarks, "benchmarks/benchmarks_lavaan.csv")
parameterEstimates(data$fits[[1]])
parameterEstimates(data$starting_values[[1]])
data$starting_values[[1]]
nitem = 10
nfact = 3
res_ind <- (nobs+1):(2*nobs)
load_ind <- map_dbl(1:nfact, function(i){(i-1)*nitem+1})
load_ind <- map(load_ind, ~.x:(.x+nitem-1))
mean_ind <- (2*nobs+nfact*(nfact+1)/2+1):(2*nobs+nfact*(nfact+1)/2+nobs+nfact)
nobs = nfact*nitem
lat_vars <- str_c("f", 1:nfact)
observed_vars <- str_c("x_", 1:nfact, "_")
observed_vars <- map(observed_vars, ~str_c(.x, 1:nitem))
res_ind <- (nobs+1):(2*nobs)
load_ind <- map_dbl(1:nfact, function(i){(i-1)*nitem+1})
load_ind <- map(load_ind, ~.x:(.x+nitem-1))
mean_ind <- (2*nobs+nfact*(nfact+1)/2+1):(2*nobs+nfact*(nfact+1)/2+nobs+nfact)
res_ind
mean_ind
load_ind
pacman::p_load(OpenMx, tidyverse, arrow, microbenchmark)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
source("factor_functions.R")
mxOption(NULL, "Default optimizer", "NPSOL")
mxOption(NULL, "Calculate Hessian", "No")
mxOption(NULL, "Standard Errors", "No")
results <- readr::read_rds("data.rds")
results <- mutate(
results,
omx_model =
pmap(results,
~with(
list(...),
gen_model_omx(nfact_vec, nitem_vec, data, starting_values$est)))
)
benchmarks <-
purrr::pmap_dfr(
results,
~with(list(...),
summary(microbenchmark(
mxRun(omx_model), times = 1, unit = "s"))))
benchmarks <-
bind_cols(
select(results, nfact_vec, nitem_vec, nobs),
select(benchmarks, -c(expr)))
readr::write_csv2(benchmarks, "benchmarks/benchmarks_omx.csv")
mxmodel <- mxRun(results$omx_model[[1]])
summary(mxmodel); summary(data$fit[[1]])
summary(results$fit[[1]])
summary(results$fits[[1]])
cfa(results$models[[1]], results$data[[1]], meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE)
lavmodel <- cfa(results$model[[1]], results$data[[1]], meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE)
summary(lavmodel)
parest <- read_arrow("parest/nfact_3_nitem_10.arrow")
parest
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = pmap(results,
~with(list(...),
simulateData(model,
sample.nobs = nobs,
orthogonal = TRUE,
std.lv = TRUE))))
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
####################### generate parameter estimates
results <- mutate(
results,
starting_values =
pmap(results,
~with(list(...),
parameterEstimates(cfa(model, data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE, do.fit = FALSE,
std.lv = TRUE)))))
results <- mutate(
results,
fits = pmap(results, ~with(list(...),
cfa(model, data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE))))
results <- mutate(
results,
parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
parest,
str_c(
"parest/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
#######################
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
pacman::p_load(lavaan, microbenchmark, dplyr)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
data <- readr::read_rds("data.rds")
benchmarks <-
purrr::pmap_dfr(data,
~with(
list(...),
summary(microbenchmark(
cfa(model, data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE), times = 1,
unit = "s"))))
benchmarks <-
bind_cols(
select(results, nfact_vec, nitem_vec, nobs),
select(benchmarks, -c(expr)))
readr::write_csv2(benchmarks, "benchmarks/benchmarks_lavaan.csv")
pacman::p_load(OpenMx, tidyverse, arrow, microbenchmark)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
source("factor_functions.R")
mxOption(NULL, "Default optimizer", "NPSOL")
mxOption(NULL, "Calculate Hessian", "No")
mxOption(NULL, "Standard Errors", "No")
parest <- read_arrow("parest/nfact_3_nitem_10.arrow")
lavmodel <- cfa(results$model[[1]], results$data[[1]], meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE)
summary(lavmodel)
parest
pacman::p_load(lavaan, tidyverse, arrow)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
config <- read_csv2("config_factor.csv")
source("factor_functions.R")
results <- config
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = pmap(results,
~with(list(...),
simulateData(model,
sample.nobs = nobs,
orthogonal = TRUE,
std.lv = TRUE))))
results <- mutate(
results,
data = map(data,  ~induce_missing(.x, 0.1)))
results <- mutate(
results,
model = pmap_chr(results,  ~gen_model_wol(.x, .y)))
####################### generate parameter estimates
results <- mutate(
results,
starting_values =
pmap(results,
~with(list(...),
parameterEstimates(cfa(model, data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE, do.fit = FALSE,
std.lv = TRUE)))))
results <- mutate(
results,
fits = pmap(results, ~with(list(...),
cfa(model, data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE))))
results <- mutate(
results,
parest = pmap(results, ~with(list(...), parameterEstimates(fits))))
pwalk(results,
~with(
list(...),
arrow::write_arrow(
parest,
str_c(
"parest/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
#######################
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"data/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
write_rds(results, "data.rds")
pacman::p_load(OpenMx, tidyverse, arrow, microbenchmark)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
source("factor_functions.R")
mxOption(NULL, "Default optimizer", "NPSOL")
mxOption(NULL, "Calculate Hessian", "No")
mxOption(NULL, "Standard Errors", "No")
results <- readr::read_rds("data.rds")
results <- mutate(
results,
omx_model =
pmap(results,
~with(
list(...),
gen_model_omx(nfact_vec, nitem_vec, data, starting_values$est)))
)
lavmodel <- cfa(results$model[[1]], results$data[[1]], meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE)
parest <- read_arrow("parest/nfact_3_nitem_10.arrow")
parest
summary(lavmodel)
pacman::p_load(OpenMx, tidyverse, arrow, microbenchmark)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
source("factor_functions.R")
mxOption(NULL, "Default optimizer", "NPSOL")
mxOption(NULL, "Calculate Hessian", "No")
mxOption(NULL, "Standard Errors", "No")
results <- readr::read_rds("data.rds")
results <- mutate(
results,
omx_model =
pmap(results,
~with(
list(...),
gen_model_omx(nfact_vec, nitem_vec, data, starting_values$est)))
)
mxmodel <- mxRun(results$omx_model[[1]])
summary(mxmodel)
pacman::p_load(OpenMx, tidyverse, arrow, microbenchmark)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
source("factor_functions.R")
mxOption(NULL, "Default optimizer", "NPSOL")
mxOption(NULL, "Calculate Hessian", "No")
mxOption(NULL, "Standard Errors", "No")
results <- readr::read_rds("data.rds")
results <- mutate(
results,
omx_model =
pmap(results,
~with(
list(...),
gen_model_omx(nfact_vec, nitem_vec, data, starting_values$est)))
)
benchmarks <-
purrr::pmap_dfr(
results,
~with(list(...),
summary(microbenchmark(
mxRun(omx_model), times = 1, unit = "s"))))
benchmarks <-
bind_cols(
select(results, nfact_vec, nitem_vec, nobs),
select(benchmarks, -c(expr)))
readr::write_csv2(benchmarks, "benchmarks/benchmarks_omx.csv")
pacman::p_load(lavaan, microbenchmark, dplyr)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
data <- readr::read_rds("data.rds")
benchmarks <-
purrr::pmap_dfr(data,
~with(
list(...),
summary(microbenchmark(
cfa(model, data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE), times = 1,
unit = "s"))))
benchmarks <-
bind_cols(
select(results, nfact_vec, nitem_vec, nobs),
select(benchmarks, -c(expr)))
readr::write_csv2(benchmarks, "benchmarks/benchmarks_lavaan.csv")
results <- readr::read_rds("data.rds")
pwalk(results,
~with(
list(...),
arrow::write_arrow(
starting_values,
str_c(
"start/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
results$starting_values[[1]]
99-30
99-33
99-nfact
99-3
