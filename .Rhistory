interval = ci_normal(sample, 0.05)
low_int[i] = interval[1]
up_int[i] = interval[2]
}
sum((low_int < 0.1)&(up_int > 0.1))/1000
low_int
up_int
low_int %>% density %>% plot
low_int <- low_int[(low_int < 0.1)&(up_int > 0.1)]
up_int <- up_int[(low_int < 0.1)&(up_int > 0.1)]
low_int <- c()
up_int <- c()
for(i in 1:1000){
sample = rbernoulli(100, p = 0.1)
interval = ci_normal(sample, 0.05)
low_int[i] = interval[1]
up_int[i] = interval[2]
}
sum((low_int < 0.1)&(up_int > 0.1))/1000
low_int_cor <- low_int[(low_int < 0.1)&(up_int > 0.1)]
up_int_cor <- up_int[(low_int < 0.1)&(up_int > 0.1)]
low_int %>% density %>% plot
p-low_int_cor %>% density
0.1-low_int_cor %>% density
(0.1-low_int_cor) %>% density
(0.1-low_int_cor) %>% hist()
for(i in 1:10000){
sample = rbernoulli(100, p = 0.1)
interval = ci_normal(sample, 0.05)
low_int[i] = interval[1]
up_int[i] = interval[2]
}
low_int %>% density %>% plot
low_int_cor <- low_int[(low_int < 0.1)&(up_int > 0.1)]
up_int_cor <- up_int[(low_int < 0.1)&(up_int > 0.1)]
(0.1-low_int_cor) %>% hist()
up_int_cor - low_int_cor
(up_int_cor - low_int_cor) %>% density()
(up_int_cor - low_int_cor) %>% density %>% plot
conf <- data.frame(low = low_int_cor, up = up_int_cor)
conf <- mutate(conf, quart = pmap(conf, function(a,b)(1/4)*(b-a)))
conf <- mutate(conf, quart = pmap(conf, function(low,up)(1/4)*(up-low)))
conf$quart
conf <- mutate(conf, quart = pmap_dbl(conf, function(low,up)(1/4)*(up-low)))
conf <- data.frame(low = low_int_cor, up = up_int_cor)
conf <- mutate(conf, quart = pmap_dbl(conf, function(low,up)(1/4)*(up-low)))
conf$quart
conf <- mutate(conf, low_small = low + quart, up_small = up-quart)
conf %>% filter(low_small < 0.1, up_small > 0.1) %>% nrow()
sum((low_int < 0.1)&(up_int > 0.1))/1000
sum((low_int < 0.1)&(up_int > 0.1))/10000
6688/10000
0.6688*2
0.9325 - 0.6688
library(tidyverse)
n <- c(5, 20, 100)
par <- c(0.1, 0.5, 0.1, 2)
expand_grid(par, n)
spec <- expand_grid(par, n)
spec$dist <- c(rep("rbernoulli", 6), rep("rexp", 6))
spec$dist
spec
?do.call
do.call("rnorm", 200)
do.call("rnorm", list(n = 200))
spec
list("n" = 5)
list(n = 5)
spec$parname <- c(rep("p", 6), rep("rate", 6))
spec
pmap(spec, do.call(..3, list(n = ..2, ..4 = ..1)))
pmap(spec, ~do.call(..3, list(n = ..2, ..4 = ..1)))
pmap(spec, ~do.call(..3, list(n = ..2, !!..4 = ..1)))
pmap(spec, ~do.call(..3, list(n = ..2, !!..4 := ..1)))
library(tidyverse, rlang)
pmap(spec, ~do.call(..3, list(n = ..2, !!..4 := ..1)))
name = "n"
list(name = 5)
list(!!name = 5)
list(!!name := 5)
pmap(spec, ~invoke(..3, list(n = ..2, ..4 = ..1)))
pmap(spec, ~invoke(..3, list(n = ..2, !!..4 = ..1)))
pmap(spec, ~invoke(..3, list(n = ..2, !!..4 := ..1)))
?:=
?`:=`
n <- c(5, 20, 100)
p <- c(0.1, 0.5)
rate <- c(0.1, 2)
bern <- expand_grid(p, n)
exp <- expand_grin(rate, n)
exp <- expand_grid(rate, n)
?with
bern
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
library(tidyverse, rlang, magrittr)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
pacman::p_load(tidyverse, rlang, magrittr)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
list(name = 5)
list(name := 5)
list(!!name := 5)
list(!!enquote(name) := 5)
sym(name)
list(sym(name) = 5)
list(sym(name) := 5)
list(!!sym(name) := 5)
myf <- function(name){
name = sym(name)
list(!!name = 5)
}
myf <- function(name){
name = sym(name)
list(!!name := 5)
}
myf(name)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
exp %<>% mutate(data = pmap(exp, ~rexp(rate = ..1, n = ..2)))
bern %>% View()
bern %<>% mutate(mean = map_dbl(data, mean))
exp %<>% mutate(mean = map_dbl(data, mean))
bern
exp
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern <- expand_grid(p, n)
exp <- expand_grid(rate, n)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
exp %<>% mutate(data = pmap(exp, ~rexp(rate = ..1, n = ..2)))
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
exp %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern %<>% mutate(mean = map_dbl(data, ~mean),
sd = map_dbl(data, ~sd))
bern <- expand_grid(p, n)
exp <- expand_grid(rate, n)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
exp %<>% mutate(data = pmap(exp, ~rexp(rate = ..1, n = ..2)))
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
exp %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000))
#### bootstrap
meansamp <- function(vec, n){
means = c()
for(i in 1:n){
means[i] <- mean(sample(vec, size = length(vec), replace = TRUE))
}
return(means)
}
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000))
bern
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000))
exp
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_int = map(boot_means, quantile, probs = c(0.025, 0.975)))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_int = map(boot_means, quantile, probs = c(0.025, 0.975)))
bern
bern$boot_int[[1]]
knitr::kable(exp)
knitr::kable(exp %>% select(boot_int))
knitr::kable(bern %>% select(boot_int))
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)))
ci_normal <- function(vec, alpha){
z_beta <- qnorm(1-alpha/2)
interval = c()
interval[1] <- (-z_beta*sd(vec)/sqrt(length(vec)))
interval[2] <- interval[1]*(-1)
interval <- interval + mean(vec)
return(interval)
}
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
?ci_normal
ci_normal
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
bern
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knittr::kable()
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable()
?knitr::kable()
knitr::opts_chunk$set(echo = TRUE)
set.seed(12132)
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable(digits = 2)
# Show results ------------------------------------------------------------
bern %<>% mutate(boot_ci = map(boot_ci, round),
norm_ci = map(norm_ci, round))
exp %<>% mutate(boot_ci = map(boot_ci, round),
norm_ci = map(norm_ci, round))
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable()
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
# Show results ------------------------------------------------------------
bern %<>% mutate(boot_ci = map(boot_ci, round, digits = 2),
norm_ci = map(norm_ci, round, digits = 2))
exp %<>% mutate(boot_ci = map(boot_ci, round, digits = 2),
norm_ci = map(norm_ci, round, digits = 2))
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable()
?rbinom
dbinom(0, 6, 0.5)
0.5^6
dbinom(1, 6, 0.5)
dbinom(2, 6, 0.5)
dbinom(3, 6, 0.5)
dbinom(4, 6, 0.5)
dbinom(5, 6, 0.5)
dbinom(6, 6, 0.5)
values <- c(0,1,2,3,4,5,6)
probs <- dbinom(values, 6, 0.5)
myf <- function(k){
(k/6)^k*(1 - k/6)^(6-k)
}
myf(values)
5^c(1,2)
c(5,10)^c(1,2)
func_results <- myf(values)
probs_greater <- pbinom(values, 5, 0.5, lower.tail = FALSE)
cumsum(probs_equal)
probs_equal <- dbinom(values, 6, 0.5)
cumsum(probs_equal)
1 - cumsum(probs_equal)
(1 - cumsum(probs_equal)) == probs_greater
probs_greater
cumsum(probs_equal)
probs_greater <- pbinom(values, 6, 0.5, lower.tail = FALSE)
(1 - cumsum(probs_equal)) == probs_greater
func_results
probs
data.frame(func_results, probs)
probs <- data.frame(func_results, probs)
filter(df, func_results > ca) %>% pull(probs) %>% sum
library(tidyverse)
prob_greater_ca <- function(ca, df){
filter(df, func_results > ca) %>% pull(probs) %>% sum
}
prob_greater_ca(0, probs)
prob_greater_ca(0.16, probs)
prob_greater_ca(0.016, probs)
prob_greater_ca(0.06697960, probs)
1-0.03125
0.05-0.03125
0.01875/(2*0.093750)
probs
2*0.015625
0.05 - 2*0.015625
0.01875/(2*0.093750)
library(ggplot2)
myf <- function(y, n){
y^y*(n-y)^(n-y)
}
ggplot() + stat_function(fun = myf)
?stat_function
myf <- function(y, n = 30000){
y^y*(n-y)^(n-y)
}
ggplot() + stat_function(fun = myf)
myf <- function(y, n = 100){
y^y*(n-y)^(n-y)
}
ggplot() + stat_function(fun = myf)
myf <- function(y, n = 100){
y^y*(n-y)^(n-y)
}
myf(seq(-100, 100, 1))
myf(seq(-100, 100, 1)) %>% plot
library(magrittr)
myf(seq(-100, 100, 1)) %>% plot
myf(seq(0, 100, 1)) %>% plot
myf(seq(1, 99, 1)) %>% plot
myf(seq(40, 60, 1)) %>% plot
myf <- function(y, n = 5){
y^y*(n-y)^(n-y)
}
myf(seq(40, 60, 1)) %>% plot
myf(seq(1, 9, 1)) %>% plot
myf <- function(y, n = 20){
y^y*(n-y)^(n-y)
}
myf(seq(1, 20, 1)) %>% plot
myf(seq(1, 19, 1)) %>% plot
myf(seq(5, 15, 1)) %>% plot
myf <- function(y, n = 20){
y^y*(1-y)^(n-y)
}
myf(seq(5, 15, 1)) %>% plot
y^y*(n-y)^(n-y)
A <- runif(5)
B <- matrix(runif(25), ncol = 5)
B %*% A
t(A) %*% B %*% A
myf <- function(A, B){
t(A) %*% B %*% A
}
myf(A, B)
library(microbenchmark)
microbenchmark(myf(A, B))
microbenchmark(myf(A, B), neval = 1000)
microbenchmark(myf(A, B))
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1",
three_path_2 =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_loadeq =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_mean =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
#means
"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy),
three_path_mean = )
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy),
three_path_mean = PoliticalDemocracy)
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy),
three_path_mean = PoliticalDemocracy)
datas[[4]]$group = c(rep("1", 25), rep("2", 25), rep("3", 25))
datas[[5]]$group = c(rep("1", 40), rep("2", 40), rep("3", 70))
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T))
fits[[2]] %>% summary()
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1",
three_path_2 =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_loadeq =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_mean =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
#means
x1 + x2 + x3 ~ a*1
y6 ~ 3*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy),
three_path_mean = PoliticalDemocracy)
datas[[4]]$group = c(rep("1", 25), rep("2", 25), rep("3", 25))
datas[[5]]$group = c(rep("1", 40), rep("2", 40), rep("3", 70))
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T))
fits[[6]]
fits[[6]] %>% summary()
datas[[4]]$group = c(rep("1", 25), rep("2", 25), rep("3", 25))
datas[[5]]$group = c(rep("1", 40), rep("2", 40), rep("3", 70))
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T))
all_equal = c("loadings", "residuals", "residual.covariances", "lv.variances",
"lv.covariances", "regressions")
fits[[4]] <- cfa(models[[4]], datas[[4]], group = "group", group.equal = all_equal,
meanstructure = FALSE)#c("loadings"))
fits[[5]] <- cfa(models[[5]], datas[[5]], group = "group", group.equal = c("loadings",
"regressions"),
meanstructure = FALSE)
get_testpars <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est, se, p = pvalue, z)
}
pars <- map(fits, get_testpars)
pars_miss <- map(fits_miss, get_testpars)
data_subsets <- map(fits, lavNames, "ov") %>%
map2(datas, ~select(.y, one_of(.x)))
imap(data_subsets,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
r"(C:\Users\maxim\.julia\dev\sem)"
setwd(r"(C:\Users\maxim\.julia\dev\sem)")
imap(pars,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
