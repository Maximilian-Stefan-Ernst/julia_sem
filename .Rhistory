numObs=301))
summary(factorModelFit <- mxRun(factorModel))
microbenchmark(mxRun(factorModel))
microbenchmark(cfa(model, dat))
factorModel <- mxModel("One Factor",
mxMatrix("Full", 5, 1, values=0.8,
free=TRUE, name="A"),
mxMatrix("Symm", 1, 1, values=1,
free=FALSE, name="L"),
mxMatrix("Diag", 5, 5, values=1,
free=TRUE, name="U"),
mxAlgebra(A %*% L %*% t(A) + U, name="R"),
mxExpectationNormal(covariance = "R",
dimnames = names(demoOneFactor)),
mxFitFunctionML(),
mxData(cov(dat), type="cov", numObs=301))
microbenchmark(mxRun(factorModel))
factorModel <- mxModel("One Factor",
mxMatrix("Full", 3, 1, values=0.8,
free=TRUE, name="A"),
mxMatrix("Symm", 1, 1, values=1,
free=FALSE, name="L"),
mxMatrix("Diag", 3, 3, values=1,
free=TRUE, name="U"),
mxAlgebra(A %*% L %*% t(A) + U, name="R"),
mxExpectationNormal(covariance = "R",
dimnames = names(data)),
mxFitFunctionML(),
mxData(cov(dat), type="cov", numObs=301))
factorModel <- mxModel("One Factor",
mxMatrix("Full", 3, 1, values=0.8,
free=TRUE, name="A"),
mxMatrix("Symm", 1, 1, values=1,
free=FALSE, name="L"),
mxMatrix("Diag", 3, 3, values=1,
free=TRUE, name="U"),
mxAlgebra(A %*% L %*% t(A) + U, name="R"),
mxExpectationNormal(covariance = "R",
dimnames = names(dat)),
mxFitFunctionML(),
mxData(cov(dat), type="cov", numObs=301))
microbenchmark(mxRun(factorModel))
summary(factorModelFit <- mxRun(factorModel))
testfit <- cfa(model, dat)
testpar <- parameterEstimates(testfit)
testpar
summary(factorModelFit <- mxRun(factorModel))
factorModel <- mxModel("One Factor",
mxMatrix("Full", 3, 1, values=1.0,
free=c(FALSE, TRUE, TRUE), name="A"),
mxMatrix("Symm", 1, 1, values=0.5,
free=TRUE, name="L"),
mxMatrix("Diag", 3, 3, values=0.5,
free=TRUE, name="U"),
mxAlgebra(A %*% L %*% t(A) + U, name="R"),
mxExpectationNormal(covariance = "R",
dimnames = names(dat)),
mxFitFunctionML(),
mxData(cov(dat), type="cov", numObs=301))
summary(factorModelFit <- mxRun(factorModel))
testpar
summary(factorModelFit <- mxRun(factorModel))
microbenchmark(mxRun(factorModel))
pacman::p_load(lavaan, feather, here)
data(HolzingerSwineford1939)
dat <- HolzingerSwineford1939[7:9]
model <- "f1 =~ x1 + x2 + x3"
testfit <- cfa(model, dat)
summary(testfit)
list(one_fact = list(A = structure(c(0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 0.777831436750412, 1.10725500737169, 0), .Dim = c(4L,
4L), .Dimnames = list(c("x1", "x2", "x3", "f1"), c("x1", "x2",
"x3", "f1"))), S = structure(c(0.834642871908924, 0, 0, 0, 0,
1.06491766480485, 0, 0, 0, 0, 0.632768388964945, 0, 0, 0, 0,
0.523727000663576), .Dim = c(4L, 4L), .Dimnames = list(c("x1",
"x2", "x3", "f1"), c("x1", "x2", "x3", "f1")))), three_path = list(
A = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 2.18036773093799, 1.81851130390037,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1.48300054022543, 0.57233619475932,
0, 0, 0, 1, 1.25674649791291, 1.05771677041185, 1.26478653624678,
0, 0, 0, 0, 0, 0, 0.837344811202946, 0, 0, 0, 0, 0, 0, 0,
1, 1.18569629880997, 1.27951217694957, 1.26594698075209,
0, 0, 0), .Dim = c(14L, 14L), .Dimnames = list(c("x1", "x2",
"x3", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "ind60",
"dem60", "dem65"), c("x1", "x2", "x3", "y1", "y2", "y3",
"y4", "y5", "y6", "y7", "y8", "ind60", "dem60", "dem65"))),
S = structure(c(0.0815493454004797, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0.119806478198423, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0.466702578156235, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1.89139551968812, 0, 0, 0, 0.623671074030224,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.37286854022783, 0, 1.31311257673291,
0, 2.15286126610351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.06746209955855,
0, 0, 0, 0.794960276374889, 0, 0, 0, 0, 0, 0, 0, 0, 1.31311257673291,
0, 3.1479047972895, 0, 0, 0, 0.348226039083801, 0, 0, 0,
0, 0, 0, 0.623671074030224, 0, 0, 0, 2.350970469996, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 2.15286126610351, 0, 0, 0, 4.95396775008949,
0, 1.35616712069039, 0, 0, 0, 0, 0, 0, 0, 0, 0.794960276374889,
0, 0, 0, 3.43137392075022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0.348226039083801, 0, 1.35616712069039, 0, 3.25408501484355,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.448437150951414,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.95603310783351,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.172481325461863
), .Dim = c(14L, 14L), .Dimnames = list(c("x1", "x2", "x3",
"y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "ind60",
"dem60", "dem65"), c("x1", "x2", "x3", "y1", "y2", "y3",
"y4", "y5", "y6", "y7", "y8", "ind60", "dem60", "dem65")))),
three_mean = list(A = structure(c(0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 1.22398222570312, 0.404808270111737, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1.06524102020668, 0.890026173415954,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1.18302583696636,
1.04996777490017, 0, 0, 0), .Dim = c(12L, 12L), .Dimnames = list(
c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9",
"visual", "textual", "speed"), c("x1", "x2", "x3", "x4",
"x5", "x6", "x7", "x8", "x9", "visual", "textual", "speed"
))), S = structure(c(0.441774330262445, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1.75746168530308, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0.964304543164598, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0.354797049653396, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0.463003278343342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0.36089934244238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0.790675885938966, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0.472711800178977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0.582342056755968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20.5926706518774,
11.800000420093, 5.15212202436206, 0, 0, 0, 0, 0, 0, 0, 0,
0, 11.800000420093, 7.55412486138995, 2.99500707442641, 0,
0, 0, 0, 0, 0, 0, 0, 0, 5.15212202436206, 2.99500707442641,
1.609698455792), .Dim = c(12L, 12L), .Dimnames = list(c("x1",
"x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "visual",
"textual", "speed"), c("x1", "x2", "x3", "x4", "x5", "x6",
"x7", "x8", "x9", "visual", "textual", "speed")))))
> summary(fits$three_mean)
lavaan 0.6-5 ended normally after 113 iterations
Estimator                                         ML
Optimization method                           NLMINB
Number of free parameters                         26
Number of observations                           301
Model Test User Model:
Test statistic                              1120.542
Degrees of freedom                                28
P-value (Chi-square)                           0.000
Parameter Estimates:
Information                                 Expected
Information saturated (h1) model          Structured
Standard errors                             Standard
Latent Variables:
Estimate  Std.Err  z-value  P(>|z|)
visual =~
x1                1.000
x2                1.224    0.020   59.759    0.000
x3                0.405    0.013   30.933    0.000
textual =~
x4                1.000
x5                1.065    0.020   53.504    0.000
x6                0.890    0.017   51.989    0.000
speed =~
x7                1.000
x8                1.183    0.061   19.433    0.000
x9                1.050    0.058   18.154    0.000
Covariances:
Estimate  Std.Err  z-value  P(>|z|)
visual ~~
textual          11.800    1.007   11.720    0.000
speed             5.152    0.500   10.296    0.000
textual ~~
speed             2.995    0.298   10.040    0.000
Intercepts:
Estimate  Std.Err  z-value  P(>|z|)
.x1                0.500
.x2                0.500
.x3                0.500
.x4                0.500
.x5                1.625    0.050   32.530    0.000
.x6               -0.083    0.043   -1.932    0.053
.x7                3.083    0.061   50.440    0.000
.x8                4.222    0.056   75.567    0.000
.x9                4.216    0.056   75.038    0.000
visual            0.000
textual           0.000
speed             0.000
Variances:
Estimate  Std.Err  z-value  P(>|z|)
.x1                0.442    0.105    4.214    0.000
.x2                1.757    0.208    8.439    0.000
.x3                0.964    0.083   11.677    0.000
.x4                0.355    0.045    7.915    0.000
.x5                0.463    0.055    8.479    0.000
.x6                0.361    0.041    8.891    0.000
.x7                0.791    0.076   10.380    0.000
.x8                0.473    0.061    7.730    0.000
.x9                0.582    0.062    9.389    0.000
visual           20.593    1.717   11.993    0.000
textual           7.554    0.645   11.713    0.000
speed             1.610    0.189    8.510    0.000
lavaan 0.6-5 ended normally after 113 iterations
Estimator                                         ML
Optimization method                           NLMINB
Number of free parameters                         26
Number of observations                           301
Model Test User Model:
Test statistic                              1120.542
Degrees of freedom                                28
P-value (Chi-square)                           0.000
Parameter Estimates:
Information                                 Expected
Information saturated (h1) model          Structured
Standard errors                             Standard
Latent Variables:
Estimate  Std.Err  z-value  P(>|z|)
visual =~
x1                1.000
x2                1.224    0.020   59.759    0.000
x3                0.405    0.013   30.933    0.000
textual =~
x4                1.000
x5                1.065    0.020   53.504    0.000
x6                0.890    0.017   51.989    0.000
speed =~
x7                1.000
x8                1.183    0.061   19.433    0.000
x9                1.050    0.058   18.154    0.000
Covariances:
Estimate  Std.Err  z-value  P(>|z|)
visual ~~
textual          11.800    1.007   11.720    0.000
speed             5.152    0.500   10.296    0.000
textual ~~
speed             2.995    0.298   10.040    0.000
Intercepts:
Estimate  Std.Err  z-value  P(>|z|)
.x1                0.500
.x2                0.500
.x3                0.500
.x4                0.500
.x5                1.625    0.050   32.530    0.000
.x6               -0.083    0.043   -1.932    0.053
.x7                3.083    0.061   50.440    0.000
.x8                4.222    0.056   75.567    0.000
.x9                4.216    0.056   75.038    0.000
visual            0.000
textual           0.000
speed             0.000
Variances:
Estimate  Std.Err  z-value  P(>|z|)
.x1                0.442    0.105    4.214    0.000
.x2                1.757    0.208    8.439    0.000
.x3                0.964    0.083   11.677    0.000
.x4                0.355    0.045    7.915    0.000
.x5                0.463    0.055    8.479    0.000
.x6                0.361    0.041    8.891    0.000
.x7                0.791    0.076   10.380    0.000
.x8                0.473    0.061    7.730    0.000
.x9                0.582    0.062    9.389    0.000
visual           20.593    1.717   11.993    0.000
textual           7.554    0.645   11.713    0.000
speed             1.610    0.189    8.510    0.000
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark)
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939)
fits <- map2(models, datas, ~cfa(.x, .y))
rams <- map(fits, RAMpath::lavaan2ram) %>% map(~.[c("A", "S")])
fits[2]
fits[2] %>% summary()
fits[2]$three_path
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark)
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939)
fits <- map2(models, datas, ~cfa(.x, .y))
fits[2]
fits[1]
fits[3]
fits[3]$three_mean %>% summary()
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939)
fits <- map2(models, datas, ~cfa(.x, .y))
fits[3]$three_mean %>% summary()
library(RAMpath)
lavaan2ram(fits[3]$three_mean)
datas[3]
datas[2]
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark)
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939)
fits <- map2(models, datas, ~cfa(.x, .y))
fits[3]$three_mean %>% summary()
cfa(models[3], datas[3], do.fit = FALSE)
cfa(datas[3], models[3], do.fit = FALSE)
microbenchmark(cfa(models[["one_fact"]], datas[["one_fact"]]),
cfa(models[["three_path"]], datas[["three_path"]]),
cfa(models[["three_mean"]], datas[["three_mean"]]))
cfa(models[[3]], datas[[3]], do.fit = FALSE)
cfa(models[[3]], datas[[3]], do.fit = FALSE) %>% summary()
cfa(models[[3]], datas[[3]], do.fit = FALSE) %>% summary(fit.measures = TRUE
)
fits[3]$three_mean %>% summary()
microbenchmark(cfa(models[[3]], datas[[3]]))
cfa(models[[3]], datas[[3]]
)
cfa(models[[3]], datas[[3]]) %>% summary()
cfa(models[[1]], data[[1]])
cfa(models[[1]], datas[[1]])
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts free
x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 ~ 1"
)
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark)
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts free
x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 ~ 1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939)
fits <- map2(models, datas, ~cfa(.x, .y))
rams <- map(fits, RAMpath::lavaan2ram) %>% map(~.[c("A", "S")])
get_testpars <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est, se, p = pvalue, z)
}
data_subsets <- map(fits, lavNames, "ov") %>%
map2(datas, ~select(.y, one_of(.x)))
imap(data_subsets,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
getwd()
setwd("C:/Users/maxim/.julia/dev/sem.jl")
imap(data_subsets,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
pars <- map(fits, get_testpars)
pars
imap(data_subsets,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
fits$2
fits[[2]]
fits[[2]] %>% summary()
imap(pars,
~str_c("test/comparisons/", .y, "_par.feather"))
?cov
data_subsets[[2]]
cov(data_subsets[[2]])
cfa(models[2], datas[[[2]]])
cfa(models[2], datas[[2]])
cfa(models[2], datas[[2]])
cfa(models[2], datas[[2]], do.fit = FALSE)
cfa(models[2], datas[[2]], do.fit = FALSE) %>% summary()
fits[[2]] %>% summary()
fits[[2]] %>% fitMeasures()
write_feather(.x, "test/comparisons/start_par.feather")
cfa(models[2], datas[[2]], do.fit = FALSE) %>% parameterEstimates()
startpar <- cfa(models[2], datas[[2]], do.fit = FALSE) %>% parameterEstimates()
write_feather(startpar, "test/comparisons/start_par.feather")
fits[[1]] %>% fitMeasures()
fits[[1]] %>% summary()
fits[[1]] %>% fitMeasures()
lavaan:::lavaan()
lavaan:::lavaan
fits[[3]] %>% summary()
fits[[3]] %>% fitMeasures()
fits[[2]] %>% fitMeasures()
