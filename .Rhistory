scale_y_continuous(
name = NULL,
breaks = c(20, 40, 60, 80),
labels = c(20, "", "", 80),
limits = c(20, 80)) +
theme(legend.position = "none",
plot.title = element_text(margin=margin(10,0,12,0)),
plot.title.position = "plot",
axis.title.y = element_text(margin = c(50, 0, 0, 0))) +
labs(title = "Live expectancy over time in 142 countries") -> main
ggsave("plot3.svg")
ggdraw() +
draw_plot(main, x = 0, y = 0, width = 1, height = 1) +
draw_plot(plots[[1]],
x = 0.04, y = 0.11, width = 0.19, height = 0.08) +
draw_plot(plots[[2]],
x = 0.23, y = 0.11, width = 0.19, height = 0.08) +
draw_plot(plots[[3]],
x = 0.43, y = 0.11, width = 0.19, height = 0.08) +
draw_plot(plots[[4]],
x = 0.62, y = 0.11, width = 0.19, height = 0.08) +
draw_plot(plots[[5]],
x = 0.8, y = 0.11, width = 0.19, height = 0.08) +
draw_plot(legend,
x = 0.53, y = 0.87, width = 0.15, height = 0.1)
ggsave("plot3.svg")
gapminder %>% ggplot() +
geom_smooth(aes(x = year,
y = lifeExp,
color = continent,
weight = pop), method = "lm")
ggsave("slopegraph.svg")
library(tidyverse)
qnorm(.975)
z_beta <- qnorm(.975)
n <- c(5, 20, 100)
map_dfc(n, rbernoulli, p = 0.1)
map_dfr(n, rbernoulli, p = 0.1)
ber_01 <- map(n, rbernoulli, p = 0.1)
ber_05 <- map(n, rbernoulli, p = 0.5)
exp_01 <- map(n, rexp, rate = 0.1)
exp_2 <- map(n, rexp, rate = 2)
ber_01
ber_01 <- map(n, rbernoulli, p = 0.1)
ber_01
ber_05
est_ber_01 <- mean(ber_01)
est_ber_05 <- mean(ber_05)
est_ber_01 <- map_dbl(ber_01, mean)
est_ber_01
est_ber_01 <- map_dbl(ber_01, mean)
est_ber_05 <- map_dbl(ber_05, mean)
est_exp_01 <- map_dbl(exp_01, mean)
est_exp_2 <- map_dbl(exp_2, mean)
var_ber_01 <- map_dbl(ber_01, var)
sd_ber_01 <- map_dbl(ber_01, sd)
sd_ber_05 <- map_dbl(ber_05, sd)
sd_exp_01 <- map_dbl(exp_01, sd)
sd_exp_2 <- map_dbl(exp_2, sd)
?sample
#### bootstrap
sample(ber_01[[1]], size = 5, replace = TRUE)
#### bootstrap
mysamp <- function(vec, n){
samples = list()
for(i in 1:n){
samples[[i]] <- sample(vec, size = length(vec), replace = TRUE)
}
}
samples_ber <- map(ber_01, mysamp)
samples_ber <- map(ber_01, mysamp, n = 100)
samples_ber
samples_ber
samples_ber
ber_01[[1]]
length(ber_01[[1]])
#### bootstrap
mysamp <- function(vec, n){
samples = list()
for(i in 1:n){
samples[[i]] <- sample(vec, size = length(vec), replace = TRUE)
}
return(samples)
}
samples_ber <- map(ber_01, mysamp, n = 100)
samples_ber
map(samples_ber, ~map_dbl(.x, mean))
means_ber_01 <- map(samples_ber_01, ~map_dbl(.x, mean))
samples_ber_01 <- map(ber_01, mysamp, n = 100)
means_ber_01 <- map(samples_ber_01, ~map_dbl(.x, mean))
means_ber_01[[2]] %>% density %>% plot
means_ber_01[[3]] %>% density %>% plot
means_ber_01[[3]] %>% quantile
means_ber_01[[3]] %>% quantile(., probs = c(0.025, 0.975))
intervalls <- map(means_ber_01, quantile, probs = c(0.025, 0.975))
intervalls
ber_01 <- map(n, rbernoulli, p = 0.1)
ber_05 <- map(n, rbernoulli, p = 0.5)
exp_01 <- map(n, rexp, rate = 0.1)
exp_2 <- map(n, rexp, rate = 2)
est_ber_01 <- map_dbl(ber_01, mean)
est_ber_05 <- map_dbl(ber_05, mean)
est_exp_01 <- map_dbl(exp_01, mean)
est_exp_2 <- map_dbl(exp_2, mean)
sd_ber_01 <- map_dbl(ber_01, sd)
sd_ber_05 <- map_dbl(ber_05, sd)
sd_exp_01 <- map_dbl(exp_01, sd)
sd_exp_2 <- map_dbl(exp_2, sd)
#### bootstrap
mysamp <- function(vec, n){
samples = list()
for(i in 1:n){
samples[[i]] <- sample(vec, size = length(vec), replace = TRUE)
}
return(samples)
}
samples_ber_01 <- map(ber_01, mysamp, n = 100)
means_ber_01 <- map(samples_ber_01, ~map_dbl(.x, mean))
intervalls <- map(means_ber_01, quantile, probs = c(0.025, 0.975))
intervalls
#### bootstrap
meansamp <- function(vec, n){
means = c()
for(i in 1:n){
means[i] <- mean(sample(vec, size = length(vec), replace = TRUE))
}
return(means)
}
samples_ber_01 <- map(ber_01, meansamp, n = 100)
samples_ber_01
samples_ber_01 <- map(ber_01, meansamp, n = 1000)
samples_ber_01
means_ber_01 <- map(ber_01, meansamp, n = 1000)
intervalls <- map(means_ber_01, quantile, probs = c(0.025, 0.975))
intervalls
for(i in 1:1000){
sample = rbernoulli(100, p = 0.1)
means <- meansamp(sample, 2000)
quant = quantile(means, probs = c(0.025, 0.975))
low_int[i] = quant[1]
up_int[i] = quant[2]
}
low_int <- c()
up_int <- c()
for(i in 1:1000){
sample = rbernoulli(100, p = 0.1)
means <- meansamp(sample, 2000)
quant = quantile(means, probs = c(0.025, 0.975))
low_int[i] = quant[1]
up_int[i] = quant[2]
}
sum((low_int < 0.1)&(up_int > 0.1))
sum((low_int < 0.1)&(up_int > 0.1))/1000
?rnorm
2*pnorm(1.96)
2*pnorm(1.96)-1
ci_normal <- function(vec, alpha){
z_beta <- qnorm(1-alpha/2)
interval = c()
interval[1] <- (-z_beta*sd(vec)/sqrt(length(vec)))
interval[2] <- interval[1]*(-1)
interval <- interval + mean(vec)
}
ci_normal(ber_01[[1]])
ci_normal(ber_01[[1]], .05)
ci_normal <- function(vec, alpha){
z_beta <- qnorm(1-alpha/2)
interval = c()
interval[1] <- (-z_beta*sd(vec)/sqrt(length(vec)))
interval[2] <- interval[1]*(-1)
interval <- interval + mean(vec)
return(interval)
}
ci_normal(ber_01[[1]], .05)
intervalls[[1]]
intervalls[[2]]
ci_normal(ber_01[[2]], .05)
ci_normal(ber_01[[3]], .05)
intervalls[[3]]
for(i in 1:1000){
sample = rbernoulli(100, p = 0.1)
interval = ci_normal(sample, 0.05)
low_int[i] = interval[1]
up_int[i] = interval[2]
}
sum((low_int < 0.1)&(up_int > 0.1))/1000
low_int
up_int
low_int %>% density %>% plot
low_int <- low_int[(low_int < 0.1)&(up_int > 0.1)]
up_int <- up_int[(low_int < 0.1)&(up_int > 0.1)]
low_int <- c()
up_int <- c()
for(i in 1:1000){
sample = rbernoulli(100, p = 0.1)
interval = ci_normal(sample, 0.05)
low_int[i] = interval[1]
up_int[i] = interval[2]
}
sum((low_int < 0.1)&(up_int > 0.1))/1000
low_int_cor <- low_int[(low_int < 0.1)&(up_int > 0.1)]
up_int_cor <- up_int[(low_int < 0.1)&(up_int > 0.1)]
low_int %>% density %>% plot
p-low_int_cor %>% density
0.1-low_int_cor %>% density
(0.1-low_int_cor) %>% density
(0.1-low_int_cor) %>% hist()
for(i in 1:10000){
sample = rbernoulli(100, p = 0.1)
interval = ci_normal(sample, 0.05)
low_int[i] = interval[1]
up_int[i] = interval[2]
}
low_int %>% density %>% plot
low_int_cor <- low_int[(low_int < 0.1)&(up_int > 0.1)]
up_int_cor <- up_int[(low_int < 0.1)&(up_int > 0.1)]
(0.1-low_int_cor) %>% hist()
up_int_cor - low_int_cor
(up_int_cor - low_int_cor) %>% density()
(up_int_cor - low_int_cor) %>% density %>% plot
conf <- data.frame(low = low_int_cor, up = up_int_cor)
conf <- mutate(conf, quart = pmap(conf, function(a,b)(1/4)*(b-a)))
conf <- mutate(conf, quart = pmap(conf, function(low,up)(1/4)*(up-low)))
conf$quart
conf <- mutate(conf, quart = pmap_dbl(conf, function(low,up)(1/4)*(up-low)))
conf <- data.frame(low = low_int_cor, up = up_int_cor)
conf <- mutate(conf, quart = pmap_dbl(conf, function(low,up)(1/4)*(up-low)))
conf$quart
conf <- mutate(conf, low_small = low + quart, up_small = up-quart)
conf %>% filter(low_small < 0.1, up_small > 0.1) %>% nrow()
sum((low_int < 0.1)&(up_int > 0.1))/1000
sum((low_int < 0.1)&(up_int > 0.1))/10000
6688/10000
0.6688*2
0.9325 - 0.6688
library(tidyverse)
n <- c(5, 20, 100)
par <- c(0.1, 0.5, 0.1, 2)
expand_grid(par, n)
spec <- expand_grid(par, n)
spec$dist <- c(rep("rbernoulli", 6), rep("rexp", 6))
spec$dist
spec
?do.call
do.call("rnorm", 200)
do.call("rnorm", list(n = 200))
spec
list("n" = 5)
list(n = 5)
spec$parname <- c(rep("p", 6), rep("rate", 6))
spec
pmap(spec, do.call(..3, list(n = ..2, ..4 = ..1)))
pmap(spec, ~do.call(..3, list(n = ..2, ..4 = ..1)))
pmap(spec, ~do.call(..3, list(n = ..2, !!..4 = ..1)))
pmap(spec, ~do.call(..3, list(n = ..2, !!..4 := ..1)))
library(tidyverse, rlang)
pmap(spec, ~do.call(..3, list(n = ..2, !!..4 := ..1)))
name = "n"
list(name = 5)
list(!!name = 5)
list(!!name := 5)
pmap(spec, ~invoke(..3, list(n = ..2, ..4 = ..1)))
pmap(spec, ~invoke(..3, list(n = ..2, !!..4 = ..1)))
pmap(spec, ~invoke(..3, list(n = ..2, !!..4 := ..1)))
?:=
?`:=`
n <- c(5, 20, 100)
p <- c(0.1, 0.5)
rate <- c(0.1, 2)
bern <- expand_grid(p, n)
exp <- expand_grin(rate, n)
exp <- expand_grid(rate, n)
?with
bern
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
library(tidyverse, rlang, magrittr)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
pacman::p_load(tidyverse, rlang, magrittr)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
list(name = 5)
list(name := 5)
list(!!name := 5)
list(!!enquote(name) := 5)
sym(name)
list(sym(name) = 5)
list(sym(name) := 5)
list(!!sym(name) := 5)
myf <- function(name){
name = sym(name)
list(!!name = 5)
}
myf <- function(name){
name = sym(name)
list(!!name := 5)
}
myf(name)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
exp %<>% mutate(data = pmap(exp, ~rexp(rate = ..1, n = ..2)))
bern %>% View()
bern %<>% mutate(mean = map_dbl(data, mean))
exp %<>% mutate(mean = map_dbl(data, mean))
bern
exp
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern <- expand_grid(p, n)
exp <- expand_grid(rate, n)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
exp %<>% mutate(data = pmap(exp, ~rexp(rate = ..1, n = ..2)))
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
exp %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern %<>% mutate(mean = map_dbl(data, ~mean),
sd = map_dbl(data, ~sd))
bern <- expand_grid(p, n)
exp <- expand_grid(rate, n)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
exp %<>% mutate(data = pmap(exp, ~rexp(rate = ..1, n = ..2)))
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
exp %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000))
#### bootstrap
meansamp <- function(vec, n){
means = c()
for(i in 1:n){
means[i] <- mean(sample(vec, size = length(vec), replace = TRUE))
}
return(means)
}
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000))
bern
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000))
exp
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_int = map(boot_means, quantile, probs = c(0.025, 0.975)))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_int = map(boot_means, quantile, probs = c(0.025, 0.975)))
bern
bern$boot_int[[1]]
knitr::kable(exp)
knitr::kable(exp %>% select(boot_int))
knitr::kable(bern %>% select(boot_int))
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)))
ci_normal <- function(vec, alpha){
z_beta <- qnorm(1-alpha/2)
interval = c()
interval[1] <- (-z_beta*sd(vec)/sqrt(length(vec)))
interval[2] <- interval[1]*(-1)
interval <- interval + mean(vec)
return(interval)
}
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
?ci_normal
ci_normal
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
bern
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knittr::kable()
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable()
?knitr::kable()
knitr::opts_chunk$set(echo = TRUE)
set.seed(12132)
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable(digits = 2)
# Show results ------------------------------------------------------------
bern %<>% mutate(boot_ci = map(boot_ci, round),
norm_ci = map(norm_ci, round))
exp %<>% mutate(boot_ci = map(boot_ci, round),
norm_ci = map(norm_ci, round))
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable()
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
# Show results ------------------------------------------------------------
bern %<>% mutate(boot_ci = map(boot_ci, round, digits = 2),
norm_ci = map(norm_ci, round, digits = 2))
exp %<>% mutate(boot_ci = map(boot_ci, round, digits = 2),
norm_ci = map(norm_ci, round, digits = 2))
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable()
?rbinom
dbinom(0, 6, 0.5)
0.5^6
dbinom(1, 6, 0.5)
dbinom(2, 6, 0.5)
dbinom(3, 6, 0.5)
dbinom(4, 6, 0.5)
dbinom(5, 6, 0.5)
dbinom(6, 6, 0.5)
values <- c(0,1,2,3,4,5,6)
probs <- dbinom(values, 6, 0.5)
myf <- function(k){
(k/6)^k*(1 - k/6)^(6-k)
}
myf(values)
5^c(1,2)
c(5,10)^c(1,2)
func_results <- myf(values)
probs_greater <- pbinom(values, 5, 0.5, lower.tail = FALSE)
cumsum(probs_equal)
probs_equal <- dbinom(values, 6, 0.5)
cumsum(probs_equal)
1 - cumsum(probs_equal)
(1 - cumsum(probs_equal)) == probs_greater
probs_greater
cumsum(probs_equal)
probs_greater <- pbinom(values, 6, 0.5, lower.tail = FALSE)
(1 - cumsum(probs_equal)) == probs_greater
func_results
probs
data.frame(func_results, probs)
probs <- data.frame(func_results, probs)
filter(df, func_results > ca) %>% pull(probs) %>% sum
library(tidyverse)
prob_greater_ca <- function(ca, df){
filter(df, func_results > ca) %>% pull(probs) %>% sum
}
prob_greater_ca(0, probs)
prob_greater_ca(0.16, probs)
prob_greater_ca(0.016, probs)
prob_greater_ca(0.06697960, probs)
1-0.03125
0.05-0.03125
0.01875/(2*0.093750)
probs
2*0.015625
0.05 - 2*0.015625
0.01875/(2*0.093750)
library(ggplot2)
myf <- function(y, n){
y^y*(n-y)^(n-y)
}
ggplot() + stat_function(fun = myf)
?stat_function
myf <- function(y, n = 30000){
y^y*(n-y)^(n-y)
}
ggplot() + stat_function(fun = myf)
myf <- function(y, n = 100){
y^y*(n-y)^(n-y)
}
ggplot() + stat_function(fun = myf)
myf <- function(y, n = 100){
y^y*(n-y)^(n-y)
}
myf(seq(-100, 100, 1))
myf(seq(-100, 100, 1)) %>% plot
library(magrittr)
myf(seq(-100, 100, 1)) %>% plot
myf(seq(0, 100, 1)) %>% plot
myf(seq(1, 99, 1)) %>% plot
myf(seq(40, 60, 1)) %>% plot
myf <- function(y, n = 5){
y^y*(n-y)^(n-y)
}
myf(seq(40, 60, 1)) %>% plot
myf(seq(1, 9, 1)) %>% plot
myf <- function(y, n = 20){
y^y*(n-y)^(n-y)
}
myf(seq(1, 20, 1)) %>% plot
myf(seq(1, 19, 1)) %>% plot
myf(seq(5, 15, 1)) %>% plot
myf <- function(y, n = 20){
y^y*(1-y)^(n-y)
}
myf(seq(5, 15, 1)) %>% plot
y^y*(n-y)^(n-y)
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark, magrittr)
set.seed(123)
induce_missing <- function(v, p){
miss <- sample(c(0,1), length(v), replace = TRUE, prob = c(1-p, p))
ifelse(miss, NA, v)
}
Demo.growth_miss_30 <- mutate(Demo.growth,
across(everything(), ~induce_missing(., 0.2)))
setwd(r"(C:\Users\maxim\.julia\dev\sem)")
write_feather(data_growth_miss_30, str_c("test/comparisons/growth_dat_miss30.feather"))
data_growth_miss_30 <- mutate(data_growth,
across(everything(), ~induce_missing(., 0.2)))
data_growth <- select(Demo.growth, t1, t2, t3, t4)
data_growth <- select(Demo.growth, t1, t2, t3, t4)
data_growth <- select(Demo.growth, t1, t2, t3, t4)
data_growth <- select(Demo.growth, t1, t2, t3, t4)
data_growth_miss_30 <- mutate(data_growth,
across(everything(), ~induce_missing(., 0.2)))
write_feather(data_growth, str_c("test/comparisons/growth_dat.feather"))
data_growth <- select(Demo.growth, t1, t2, t3, t4)
data_growth_miss_30 <- mutate(data_growth,
across(everything(), ~induce_missing(., 0.3)))
write_feather(data_growth, str_c("test/comparisons/growth_dat.feather"))
write_feather(data_growth_miss_30, str_c("test/comparisons/growth_dat_miss30.feather"))
manifests<-c("S_1","S_2","S_3","S_4","C_1","C_2","C_3","C_4","C_5","C_6","F_1","F_2","F_3","F_4","F_5","F_6","M_1","M_2","M_3","M_4","M_5","M_6")
