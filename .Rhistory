df <- setNames(df, str_c(1:20))
df <- setNames(df, str_c(1:20))
df <- df %>% pivot_longer(everything(),
names_to = "group",
values_to = "dep")
head(df)
install.packages("caret")
library(caret)
dummyVars(~ group, data = df)
dv <- dummyVars(~ group, data = df)
predict(dv, df)
df <- predict(dv, df)
df %>%  head()
df <- map_dfc(1:20, ~rnorm(100, means[.x], sds[.x]))
df <- setNames(df, str_c(1:20))
df <- df %>% pivot_longer(everything(),
names_to = "group",
values_to = "dep")
library(caret)
dv <- dummyVars(~ group, data = df)
dummies <- predict(dv, df)
df <- cbind(df, dummies)
df$group <- NULL
model <- lm(dep ~ ., data = df)
model
model %>% summary()
means <- rnorm(20, 0, 10)
sds <- rnorm(20, 5, 1)
df <- map_dfc(1:20, ~rnorm(100, means[.x], sds[.x]))
df <- setNames(df, str_c(1:20))
df <- df %>% pivot_longer(everything(),
names_to = "group",
values_to = "dep")
library(caret)
dv <- dummyVars(~ group, data = df)
dummies <- predict(dv, df)
df <- cbind(df, dummies)
df$group <- NULL
model <- lm(dep ~ ., data = df)
model %>% summary()
library(tidyverse)
means <- rnorm(20, 0, 10)
sds <- rnorm(20, 5, 1)
df <- map_dfc(1:20, ~rnorm(100, means[.x], sds[.x]))
df <- setNames(df, str_c(1:20))
df <- df %>% pivot_longer(everything(),
names_to = "group",
values_to = "dep")
# analysis ----------------------------------------------------------------
library(caret)
dv <- dummyVars(~ group, data = df)
dummies <- predict(dv, df)
df <- cbind(df, dummies)
df$group <- NULL
model <- lm(dep ~ ., data = df)
model %>% summary()
df
library(tidyverse)
means <- rnorm(7, 0, 10)
sds <- rnorm(7, 5, 1)
df <- map_dfc(1:7, ~rnorm(100, means[.x], sds[.x]))
df <- setNames(df, str_c(1:7))
df <- df %>% pivot_longer(everything(),
names_to = "group",
values_to = "dep")
library(caret)
dv <- dummyVars(~ group, data = df)
dummies <- predict(dv, df)
df <- cbind(df, dummies)
df$group <- NULL
model <- lm(dep ~ ., data = df)
model %>% summary()
library(tidyverse)
means <- rnorm(7, 0, 10)
sds <- rnorm(7, 5, 1)
df <- map_dfc(1:7, ~rnorm(100, means[.x], sds[.x]))
df <- setNames(df, str_c(1:7))
df <- df %>% pivot_longer(everything(),
names_to = "group",
values_to = "dep")
library(caret)
dv <- dummyVars(~ group, data = df)
dummies <- predict(dv, df)
df_s <- df
df <- cbind(df, dummies)
df$group <- NULL
model <- lm(dep ~ ., data = df)
model %>% summary()
head(df_s)
df_s %>% ggplot(aes(y = dep)) + geom_density(aes(color = group))
df_s %>% ggplot(aes(x = dep)) + geom_density(aes(fill = group))
df_s %>% ggplot(aes(x = dep)) +
geom_density(aes(fill = group), alpha = .4) +
theme_minimal()
df_s %>% ggplot(aes(x = dep)) +
geom_density(aes(fill = group), alpha = .4, color = NA) +
theme_minimal()
versionInfo()
sessionInfo()
packageVersion("rstudio")
testme <- function(x){
browser()
}
testme(mtcars)
library(tidyverse)
trials <- map(1:1000, ~runif(100, -1/2, 1/2))
trials[[1]]
sum_trials <- map_dbl(trials, sum)
sum_trials <- abs(sum_trials)
sum(sum_trials < 5.658)/length(sum_trials)
trials <- map(1:100000, ~runif(100, -1/2, 1/2))
sum_trials <- map_dbl(trials, sum)
sum_trials <- abs(sum_trials)
sum(sum_trials < 5.658)/length(sum_trials)
library(tidyverse)
myv <- map_dbl(1:1000, rnorm(1, 0, 1))
myv <- map_dbl(1:1000, ~rnorm(1, 0, 1))
myv
myv %>% density() %>% plot()
myv <- map_dbl(1:100000, ~rnorm(1, 0, 1))
myv %>% density() %>% plot()
myv2 <- rnorm(100000, 0, 1)
myv2 %>% density %>% plot
myv %>% density() %>% plot()
myv2 %>% density %>% plot
myv %>% density() %>% plot()
myv2 %>% density %>% plot
myv %>% density() %>% plot()
myv2 %>% density %>% plot
myv %>% density() %>% plot()
myv2 %>% density %>% plot
ggplot() + geom_density(data = data.frame(x = myv2), aes(x = x))
ggplot() + geom_density(data = data.frame(x = myv2), aes(x = x)) +
geom_density(data = data.frame(x = myv), aes(x = x))
ggplot() + geom_density(data = data.frame(x = myv2), aes(x = x))
Sys.setenv(LANG = "en")
x + "1"
install.packages("rstan")
install.packages("rstan")
install.packages("ctsem")
install.packages("ctsem")
library(ctsem)
ctsem::ctCheckFit(
)
pacman::p_load(broom.mixed, readr, rstanarm, tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
pacman::p_load(broom.mixed, readr, rstanarm, tidymodels)
urchins <-
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
pacman::p_load(broom.mixed, readr, rstanarm, tidymodels)
urchins <-
read_csv("https://tidymodels.org/start/models/urchins.csv") %>%
# Change the names to be a little more verbose
setNames(c("food_regime", "initial_volume", "width")) %>%
# Factors are very helpful for modeling, so we convert one column
mutate(food_regime = factor(food_regime, levels = c("Initial", "Low", "High")))
ggplot(urchins,
aes(x = initial_volume,
y = width,
group = food_regime,
col = food_regime)) +
geom_point() +
geom_smooth(method = lm, se = FALSE) +
scale_color_viridis_d(option = "plasma", end = .7)
lm_mod <-
linear_reg() %>%
set_engine("lm")
lm_mod
View(lm_mod)
lm_fit <-
lm_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit
lm_fit %>% tidy()
lm_fit %>% summary()
new_points <- expand.grid(initial_volume = 20,
food_regime = c("Initial", "Low", "High"))
new_points
prior_dist <- rstanarm::student_t(df = 1)
set.seed(123)
# make the parsnip model
bayes_mod <-
linear_reg() %>%
set_engine("stan",
prior_intercept = prior_dist,
prior = prior_dist)
# train the model
bayes_fit <-
bayes_mod %>%
fit(width ~ initial_volume * food_regime, data = urchins)
print(bayes_fit, digits = 5)
bayes_fit %>% tidy()
pacman::p_load(nycflights13, skimr, tidymodels)
pacman::p_load(nycflights13, skimr, tidymodels)
flight_data %>%
skimr::skim(dest, carrier)
flight_data <-
flights %>%
mutate(
# Convert the arrival delay to a factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# We will use the date (not date-time) in the recipe below
date = as.Date(time_hour)
) %>%
# Include the weather data
inner_join(weather, by = c("origin", "time_hour")) %>%
# Only retain the specific columns we will use
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# Exclude missing data
na.omit() %>%
# For creating models, it is better to have qualitative columns
# encoded as factors (instead of character strings)
mutate_if(is.character, as.factor)
flight_data %>%
skimr::skim(dest, carrier)
set.seed(555)
# Put 3/4 of the data into the training set
data_split <- initial_split(flight_data, prop = 3/4)
View(data_split)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
?update_role
exp(-0.417)
exp(-0.417 - 0.887)
exp(-0.417 - 0.887)/(exp(-0.417))
exp(-0.887)
1/(1+exp(- 0.887))
1/(1+exp(-0.417 - 0.887))
0.7865074 - 0.7082707
11/(1+exp(0.417 + 0.887))
1/(1+exp(0.417 + 0.887))
1/(1+exp(0.417))
0.2112/1.571
(0.708/(1-0.708))*(27/2)
9.9709+50*0.6435+40*0.2112
(30.885-24.715)/30.885
0.3127/(0.3127+0.4286)
(11*12)/2
(11*12)/2 + 11
11+7+3+3+3+11
77-38
1/(1 + exp(-(-4.7173 + 0.3001*10 + (-0.0027*200))))
1/(1 + exp((-4.7173 + 0.3001*10 + (-0.0027*200))))
exp(0.3001)
3.874^2
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark)
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939)
fits <- map2(models, datas, ~cfa(.x, .y))
fits[[2]] %>% summary()
fits[[2]] %>% summary()
fits[[2]] %>% fitmeasures()
install.packages("openMx")
install.packages("OpenMx")
library(OpenMx)
dataRaw      <- mxData( observed=datas[[2]], type="raw" )
names(dataRaw)
names(datas[[2]])
# residual variances
resVars      <- mxPath( from=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8"), arrows=2,
free=TRUE, values=c(1,1,1,1,1,1,1,1,1,1,1),
labels=c("e1","e2","e3","e4","e5","e6", "e7","e8","e9","e10","e11") )
resVars
?mxPath
dataRaw      <- mxData( observed=datas[[2]], type="raw" )
# residual variances
resVars      <- mxPath( from=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8"), arrows=2,
free=TRUE, values=c(1,1,1,1,1,1,1,1,1,1,1),
labels=c("e1","e2","e3","e4","e5","e6", "e7","e8","e9","e10","e11") )
# latent variances and covariance
latVars      <- mxPath( from=c("ind60","ind60", "dem60"), to=c("dem65","dem60", "dem65"), arrows=1,
free=TRUE, values=c(.5,.5,.5), labels=c("lat1","lat2","lat3") )
# factor loadings for x variables
facLoadsX    <- mxPath( from="ind60", to=c("x1","x2","x3"), arrows=1,
free=c(F,T,T), values=c(1,1,1), labels=c("l1","l2","l3") )
# factor loadings for y variables
facLoadsY1    <- mxPath( from="dem60", to=c("y1","y2","y3", "y4"), arrows=1,
free=c(F,T,T,T), values=c(1,1,1,1), labels=c("l4","l5","l6","l7") )
facLoadsY2   <- mxPath( from="dem65", to=c("y5","y6","y7","y8"), arrows=1,
free=c(F,T,T,T), values=c(1,1,1,1), labels=c("l8","l9","l10","l11") )
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, latVars, facLoadsX, facLoadsY)
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6","y7", "y8"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, latVars, facLoadsX, facLoadsY1, facLoadsY2)
oneFactorFit <- mxRun(twoFactorModel)
# means
means        <- mxPath( from="one", to=c("x1","x2","x3","y1","y2","y3",
"y4", "y5", "y6","y7", "y8",
"ind60","dem60", "dem65"),
arrows=1,
free=c(T,T,T,T,T,T,T,T,T,T,T,F,F), values=c(1,1,1,1,1,1,1,1,1,1,1,0,0),
labels=c("meanx1","meanx2","meanx3",
"meany1","meany2","meany3",
"meany4","meany5","meany6",
"meany7","meany8",
NA,NA) )
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6","y7", "y8"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, latVars, facLoadsX, facLoadsY1, facLoadsY2)
oneFactorFit <- mxRun(twoFactorModel)
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6","y7", "y8"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, latVars, facLoadsX, facLoadsY1, facLoadsY2, means)
oneFactorFit <- mxRun(twoFactorModel)
dataRaw      <- mxData( observed=datas[[2]], type="raw" )
# residual variances
resVars      <- mxPath( from=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8"), arrows=2,
free=TRUE, values=c(1,1,1,1,1,1,1,1,1,1,1),
labels=c("e1","e2","e3","e4","e5","e6", "e7","e8","e9","e10","e11") )
resVars2      <- mxPath( from=c("y1", "y2", "y2", "y3", "y4", "y6"),
to = c("y5", "y4", "y6", "y7", "y8", "y8"), arrows = 2,
free=TRUE, values=c(1,1,1,1,1,1,1,1,1,1,1),
labels=c("e1","e2","e3","e4","e5","e6", "e7","e8","e9","e10","e11") )
# latent variances and covariance
latVars      <- mxPath( from=c("ind60","ind60", "dem60"), to=c("dem65","dem60", "dem65"), arrows=1,
free=TRUE, values=c(.5,.5,.5), labels=c("lat1","lat2","lat3") )
dataRaw      <- mxData( observed=datas[[2]], type="raw" )
# residual variances
resVars      <- mxPath( from=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8"), arrows=2,
free=TRUE, values=c(1,1,1,1,1,1,1,1,1,1,1),
labels=c("e1","e2","e3","e4","e5","e6", "e7","e8","e9","e10","e11") )
resVars2      <- mxPath( from=c("y1", "y2", "y2", "y3", "y4", "y6"),
to = c("y5", "y4", "y6", "y7", "y8", "y8"), arrows = 2,
free=TRUE, values=c(1,1,1,1,1,1,1,1,1,1,1),
labels=c("ce1","ce2","ce3","ce4","ce5","ce6") )
# latent variances and covariance
latVars      <- mxPath( from=c("ind60","ind60", "dem60"), to=c("dem65","dem60", "dem65"), arrows=1,
free=TRUE, values=c(.5,.5,.5), labels=c("lat1","lat2","lat3") )
resVars2      <- mxPath( from=c("y1", "y2", "y2", "y3", "y4", "y6"),
to = c("y5", "y4", "y6", "y7", "y8", "y8"), arrows = 2,
free=TRUE, values=c(1,1,1,1,1,1),
labels=c("ce1","ce2","ce3","ce4","ce5","ce6") )
# latent variances and covariance
latVars      <- mxPath( from=c("ind60","ind60", "dem60"), to=c("dem65","dem60", "dem65"), arrows=1,
free=TRUE, values=c(.5,.5,.5), labels=c("lat1","lat2","lat3") )
# factor loadings for x variables
facLoadsX    <- mxPath( from="ind60", to=c("x1","x2","x3"), arrows=1,
free=c(F,T,T), values=c(1,1,1), labels=c("l1","l2","l3") )
# factor loadings for y variables
facLoadsY1    <- mxPath( from="dem60", to=c("y1","y2","y3", "y4"), arrows=1,
free=c(F,T,T,T), values=c(1,1,1,1), labels=c("l4","l5","l6","l7") )
facLoadsY2   <- mxPath( from="dem65", to=c("y5","y6","y7","y8"), arrows=1,
free=c(F,T,T,T), values=c(1,1,1,1), labels=c("l8","l9","l10","l11") )
# means
means        <- mxPath( from="one", to=c("x1","x2","x3","y1","y2","y3",
"y4", "y5", "y6","y7", "y8",
"ind60","dem60", "dem65"),
arrows=1,
free=c(T,T,T,T,T,T,T,T,T,T,T,F,F), values=c(1,1,1,1,1,1,1,1,1,1,1,0,0),
labels=c("meanx1","meanx2","meanx3",
"meany1","meany2","meany3",
"meany4","meany5","meany6",
"meany7","meany8",
NA,NA) )
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6","y7", "y8"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, resVars2, latVars, facLoadsX, facLoadsY1, facLoadsY2, means)
oneFactorFit <- mxRun(twoFactorModel)
dataRaw      <- mxData( observed=datas[[2]], type="raw" )
# residual variances
resVars      <- mxPath( from=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8"), arrows=2,
free=TRUE, values=c(1,1,1,1,1,1,1,1,1,1,1),
labels=c("e1","e2","e3","e4","e5","e6", "e7","e8","e9","e10","e11") )
resVars2      <- mxPath( from=c("y1", "y2", "y2", "y3", "y4", "y6"),
to = c("y5", "y4", "y6", "y7", "y8", "y8"), arrows = 2,
free=TRUE, values=rep(0,6),
labels=c("ce1","ce2","ce3","ce4","ce5","ce6") )
# latent variances and covariance
latPaths      <- mxPath( from=c("ind60","ind60", "dem60"), to=c("dem65","dem60", "dem65"), arrows=1,
free=TRUE, values=c(0,0,0), labels=c("vlat1","vlat2","vlat3") )
latVars      <- mxPath( from=c("ind60","ind60", "dem60"), arrows=2,
free=TRUE, values=c(.05,.05,.05), labels=c("lat1","lat2","lat3") )
# factor loadings for x variables
facLoadsX    <- mxPath( from="ind60", to=c("x1","x2","x3"), arrows=1,
free=c(F,T,T), values=c(1,1,1), labels=c("l1","l2","l3") )
# factor loadings for y variables
facLoadsY1    <- mxPath( from="dem60", to=c("y1","y2","y3", "y4"), arrows=1,
free=c(F,T,T,T), values=c(1,1,1,1), labels=c("l4","l5","l6","l7") )
facLoadsY2   <- mxPath( from="dem65", to=c("y5","y6","y7","y8"), arrows=1,
free=c(F,T,T,T), values=c(1,1,1,1), labels=c("l8","l9","l10","l11") )
# means
means        <- mxPath( from="one", to=c("x1","x2","x3","y1","y2","y3",
"y4", "y5", "y6","y7", "y8",
"ind60","dem60", "dem65"),
arrows=1,
free=c(T,T,T,T,T,T,T,T,T,T,T,F,F), values=c(1,1,1,1,1,1,1,1,1,1,1,0,0),
labels=c("meanx1","meanx2","meanx3",
"meany1","meany2","meany3",
"meany4","meany5","meany6",
"meany7","meany8",
NA,NA) )
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6","y7", "y8"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, resVars2, latVars, latPaths, facLoadsX, facLoadsY1, facLoadsY2, means)
oneFactorFit <- mxRun(twoFactorModel)
oneFactorFit$output
summary(oneFactorFit)
fits <- map2(models, datas, ~cfa(.x, .y))
summary(fits[[2]])
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T))
summary(fits[[2]])
# means
means        <- mxPath( from="one", to=c("x1","x2","x3","y1","y2","y3",
"y4", "y5", "y6","y7", "y8",
"ind60","dem60", "dem65"),
arrows=1,
free=c(T,T,T,T,T,T,T,T,T,T,T,F,F), values=c(1,1,1,1,1,1,1,1,1,1,1,0,0,0),
labels=c("meanx1","meanx2","meanx3",
"meany1","meany2","meany3",
"meany4","meany5","meany6",
"meany7","meany8",
NA,NA,NA) )
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6","y7", "y8"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, resVars2, latVars, latPaths, facLoadsX, facLoadsY1, facLoadsY2, means)
oneFactorFit <- mxRun(twoFactorModel)
oneFactorFit$output
summary(oneFactorFit)
summary(fits[[2]])
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark)
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939)
cov(datas[[²]])
cov(datas[[2]])
datas[[2]]
datas[[2]] %>% head()
test = read_feather("test/comparisons/three_path_dat.feather")
getwd()
setwd("C:/Users/maxim/.julia/dev/sem")
test = read_feather("test/comparisons/three_path_dat.feather")
View(test)
cov(test)
