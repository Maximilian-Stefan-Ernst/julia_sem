dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
#means
x1 + x2 + x3 ~ a*1
y6 ~ 3*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy),
three_path_mean = PoliticalDemocracy)
datas[[4]]$group = c(rep("1", 25), rep("2", 25), rep("3", 25))
datas[[5]]$group = c(rep("1", 40), rep("2", 40), rep("3", 70))
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T))
all_equal = c("loadings", "residuals", "residual.covariances", "lv.variances",
"lv.covariances", "regressions")
fits[[4]] <- cfa(models[[4]], datas[[4]], group = "group", group.equal = all_equal,
meanstructure = FALSE)#c("loadings"))
fits[[5]] <- cfa(models[[5]], datas[[5]], group = "group", group.equal = c("loadings",
"regressions"),
meanstructure = FALSE)
# FIML --------------------------------------------------------------------
induce_missing <- function(v, p){
miss <- sample(c(0,1), length(v), replace = TRUE, prob = c(1-p, p))
ifelse(miss, NA, v)
}
three_path_dat_miss20 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.2)))
three_path_dat_miss30 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.3)))
three_path_dat_miss50 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.5)))
datas_miss <- list(
dat_miss20 = three_path_dat_miss20,
dat_miss30 = three_path_dat_miss30,
dat_miss50 = three_path_dat_miss50)
fits_miss <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML"))
fits_miss_mean <-
map(datas_miss, ~cfa(models[[6]], data = .x, missing = "FIML"))
# write do disk -----------------------------------------------------------
#rams <- map(fits, RAMpath::lavaan2ram) %>% map(~.[c("A", "S")])
get_testpars <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est, se, p = pvalue, z)
}
pars <- map(fits, get_testpars)
pars_miss <- map(fits_miss, get_testpars)
pars_miss_mean <- map(fits_miss_mean, get_testpars)
data_subsets <- map(fits, lavNames, "ov") %>%
map2(datas, ~select(.y, one_of(.x)))
data_subsets_miss <- map(fits_miss, lavNames, "ov") %>%
map2(datas_miss, ~select(.y, one_of(.x)))
fitm <- map(fits, fitmeasures)
fitm <- map(fits, fitmeasures)
fitm_miss <- map(fits_miss, fitmeasures)
fitm_miss_mean <- map(fits_miss_mean, fitmeasures)# write out
fitm
imap(fitm,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm.feather")))
fitm
fitm[[1]]
fitm[[1]] %>% as_tibble()
fitm[[1]]$names
fitm[[1]] %>% data.frame
fitm[[1]] %>% as.list() %>% as_tibble()
fitm %>% as.list %>% as_tibble %>%
imap(~write_feather(.x, str_c("test/comparisons/", .y, "_fitm.feather")))
get_fitm <- function(fit){
fitm <- fitmeasures(fit)
fitm <- as_tiblle(as.list(fitm))
}
fitm <- map(fits, get_fitm)
get_fitm <- function(fit){
fitm <- fitmeasures(fit)
fitm <- as_tibble(as.list(fitm))
}
fitm <- map(fits, get_fitm)
fitm_miss <- map(fits_miss, get_fitm)
fitm_miss_mean <- map(fits_miss_mean, get_fitm)
fitm
imap(fitm,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm.feather")))
setwd(r"(C:\Users\maxim\.julia\dev\sem)")
imap(fitm,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm.feather")))
imap(fitm_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm_miss.feather")))
imap(fitm_miss_mean,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm_miss_mean.feather")))
class?lavaan
class?lavaan
lavaan:::fitmeasures
lavaan::fitmeasures
showMethods("fitmeasures")
PoliticalDemocracy %>% nrow
head(PoliticalDemocracy)
c(c(1,2), c(2,3))
library(OpenMx)
dataRaw      <- mxData( observed=datas[[2]], type="raw" )
# residual variances
resVars      <- mxPath( from=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6", "y7", "y8"), arrows=2,
free=TRUE, values=c(1,1,1,1,1,1,1,1,1,1,1),
labels=c("e1","e2","e3","e4","e5","e6", "e7","e8","e9","e10","e11") )
resVars2      <- mxPath( from=c("y1", "y2", "y2", "y3", "y4", "y6"),
to = c("y5", "y4", "y6", "y7", "y8", "y8"), arrows = 2,
free=TRUE, values=rep(0,6),
labels=c("ce1","ce2","ce3","ce4","ce5","ce6") )
# latent variances and covariance
latPaths      <- mxPath( from=c("ind60","ind60", "dem60"), to=c("dem65","dem60", "dem65"), arrows=1,
free=TRUE, values=c(0,0,0), labels=c("vlat1","vlat2","vlat3") )
latVars      <- mxPath( from=c("ind60","ind60", "dem60"), arrows=2,
free=TRUE, values=c(.05,.05,.05), labels=c("lat1","lat2","lat3") )
# factor loadings for x variables
facLoadsX    <- mxPath( from="ind60", to=c("x1","x2","x3"), arrows=1,
free=c(F,T,T), values=c(1,1,1), labels=c("l1","l2","l3") )
# factor loadings for y variables
facLoadsY1    <- mxPath( from="dem60", to=c("y1","y2","y3", "y4"), arrows=1,
free=c(F,T,T,T), values=c(1,1,1,1), labels=c("l4","l5","l6","l7") )
facLoadsY2   <- mxPath( from="dem65", to=c("y5","y6","y7","y8"), arrows=1,
free=c(F,T,T,T), values=c(1,1,1,1), labels=c("l8","l9","l10","l11") )
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6","y7", "y8"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, resVars2, latVars, latPaths, facLoadsX, facLoadsY1, facLoadsY2)#, means)
oneFactorFit <- mxRun(twoFactorModel)
# means
means        <- mxPath( from="one", to=c("x1","x2","x3","y1","y2","y3",
"y4", "y5", "y6","y7", "y8",
"ind60","dem60", "dem65"),
arrows=1,
free=c(T,T,T,T,T,T,T,T,T,T,T,F,F), values=c(1,1,1,1,1,1,1,1,1,1,1,0,0,0),
labels=c("meanx1","meanx2","meanx3",
"meany1","meany2","meany3",
"meany4","meany5","meany6",
"meany7","meany8",
NA,NA,NA) )
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6","y7", "y8"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, resVars2, latVars, latPaths, facLoadsX, facLoadsY1, facLoadsY2), means)
twoFactorModel <- mxModel("Two Factor Model Path Specification", type="RAM",
manifestVars=c("x1", "x2", "x3", "y1", "y2", "y3", "y4", "y5", "y6","y7", "y8"),
latentVars=c("ind60","dem60", "dem65"),
dataRaw, resVars, resVars2, latVars, latPaths, facLoadsX, facLoadsY1, facLoadsY2, means)
oneFactorFit <- mxRun(twoFactorModel)
oneFactorFit$output
summary(oneFactorFit)
help(mxRefModels)
summary(oneFactorFit, refModels=mxRefModels(oneFactorFit, run = TRUE))
summary(oneFactorFit, refModels=mxRefModels(oneFactorFit))
summary(oneFactorFit, refModels=mxRefModels(oneFactorFit, run = T))
summary(oneFactorFit)
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T), likelihood = "wishart")
all_equal = c("loadings", "residuals", "residual.covariances", "lv.variances",
"lv.covariances", "regressions")
fits[[4]] <- cfa(models[[4]], datas[[4]], group = "group", group.equal = all_equal,
meanstructure = FALSE)#c("loadings"))
fits[[5]] <- cfa(models[[5]], datas[[5]], group = "group", group.equal = c("loadings",
"regressions"),
meanstructure = FALSE)
induce_missing <- function(v, p){
miss <- sample(c(0,1), length(v), replace = TRUE, prob = c(1-p, p))
ifelse(miss, NA, v)
}
three_path_dat_miss20 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.2)))
three_path_dat_miss30 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.3)))
three_path_dat_miss50 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.5)))
datas_miss <- list(
dat_miss20 = three_path_dat_miss20,
dat_miss30 = three_path_dat_miss30,
dat_miss50 = three_path_dat_miss50)
fits_miss <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML"))
fits_miss_mean <-
map(datas_miss, ~cfa(models[[6]], data = .x, missing = "FIML"))
get_testpars <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est, se, p = pvalue, z)
}
pars <- map(fits, get_testpars)
pars_miss <- map(fits_miss, get_testpars)
pars_miss_mean <- map(fits_miss_mean, get_testpars)
data_subsets <- map(fits, lavNames, "ov") %>%
map2(datas, ~select(.y, one_of(.x)))
data_subsets_miss <- map(fits_miss, lavNames, "ov") %>%
map2(datas_miss, ~select(.y, one_of(.x)))
get_fitm <- function(fit){
fitm <- fitmeasures(fit)
fitm <- as_tibble(as.list(fitm))
}
fitm <- map(fits, get_fitm)
fitm_miss <- map(fits_miss, get_fitm)
fitm_miss_mean <- map(fits_miss_mean, get_fitm)
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark, magrittr)
set.seed(123)
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1",
three_path_2 =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_loadeq =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_mean =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
#means
x1 + x2 + x3 ~ a*1
y6 ~ 3*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy),
three_path_mean = PoliticalDemocracy)
datas[[4]]$group = c(rep("1", 25), rep("2", 25), rep("3", 25))
datas[[5]]$group = c(rep("1", 40), rep("2", 40), rep("3", 70))
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T), likelihood = "wishart")
all_equal = c("loadings", "residuals", "residual.covariances", "lv.variances",
"lv.covariances", "regressions")
fits[[4]] <- cfa(models[[4]], datas[[4]], group = "group", group.equal = all_equal,
meanstructure = FALSE)#c("loadings"))
fits[[5]] <- cfa(models[[5]], datas[[5]], group = "group", group.equal = c("loadings",
"regressions"),
meanstructure = FALSE)
induce_missing <- function(v, p){
miss <- sample(c(0,1), length(v), replace = TRUE, prob = c(1-p, p))
ifelse(miss, NA, v)
}
three_path_dat_miss20 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.2)))
three_path_dat_miss30 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.3)))
three_path_dat_miss50 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.5)))
datas_miss <- list(
dat_miss20 = three_path_dat_miss20,
dat_miss30 = three_path_dat_miss30,
dat_miss50 = three_path_dat_miss50)
fits_miss <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML"))
fits_miss_mean <-
map(datas_miss, ~cfa(models[[6]], data = .x, missing = "FIML"))
get_testpars <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est, se, p = pvalue, z)
}
pars <- map(fits, get_testpars)
pars_miss <- map(fits_miss, get_testpars)
pars_miss_mean <- map(fits_miss_mean, get_testpars)
data_subsets <- map(fits, lavNames, "ov") %>%
map2(datas, ~select(.y, one_of(.x)))
data_subsets_miss <- map(fits_miss, lavNames, "ov") %>%
map2(datas_miss, ~select(.y, one_of(.x)))
get_fitm <- function(fit){
fitm <- fitmeasures(fit)
fitm <- as_tibble(as.list(fitm))
}
fitm <- map(fits, get_fitm)
fitm_miss <- map(fits_miss, get_fitm)
fitm_miss_mean <- map(fits_miss_mean, get_fitm)
imap(data_subsets,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
imap(data_subsets_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
imap(pars_miss_mean,
~write_feather(.x, str_c("test/comparisons/", .y, "_par_mean.feather")))
imap(fitm,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm.feather")))
imap(fitm_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm_miss.feather")))
imap(fitm_miss_mean,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm_miss_mean.feather")))
?chisq
??chisq
?dchisq
pchisq(38.12521822805852, 35)
1 - pchisq(38.12521822805852, 35)
fits[[2]] %>% summary()
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T), likelihood = "wishart")
fits[[2]] %>% summary()
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T, likelihood = "wishart"))
fits[[2]] %>% summary()
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark, magrittr)
set.seed(123)
#setwd(r"(C:\Users\maxim\.julia\dev\sem)")
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1",
three_path_2 =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_loadeq =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_mean =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
#means
x1 + x2 + x3 ~ a*1
y6 ~ 3*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy),
three_path_mean = PoliticalDemocracy)
datas[[4]]$group = c(rep("1", 25), rep("2", 25), rep("3", 25))
datas[[5]]$group = c(rep("1", 40), rep("2", 40), rep("3", 70))
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T, likelihood = "wishart"))
all_equal = c("loadings", "residuals", "residual.covariances", "lv.variances",
"lv.covariances", "regressions")
fits[[4]] <- cfa(models[[4]], datas[[4]], group = "group", group.equal = all_equal,
meanstructure = FALSE)#c("loadings"))
fits[[5]] <- cfa(models[[5]], datas[[5]], group = "group", group.equal = c("loadings",
"regressions"),
meanstructure = FALSE)
# FIML --------------------------------------------------------------------
induce_missing <- function(v, p){
miss <- sample(c(0,1), length(v), replace = TRUE, prob = c(1-p, p))
ifelse(miss, NA, v)
}
three_path_dat_miss20 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.2)))
three_path_dat_miss30 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.3)))
three_path_dat_miss50 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.5)))
datas_miss <- list(
dat_miss20 = three_path_dat_miss20,
dat_miss30 = three_path_dat_miss30,
dat_miss50 = three_path_dat_miss50)
fits_miss <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML"))
fits_miss_mean <-
map(datas_miss, ~cfa(models[[6]], data = .x, missing = "FIML"))
# write do disk -----------------------------------------------------------
#rams <- map(fits, RAMpath::lavaan2ram) %>% map(~.[c("A", "S")])
get_testpars <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est, se, p = pvalue, z)
}
#write_feather(datas[[5]], "test/comparisons/testdat.feather")
pars <- map(fits, get_testpars)
pars_miss <- map(fits_miss, get_testpars)
pars_miss_mean <- map(fits_miss_mean, get_testpars)
data_subsets <- map(fits, lavNames, "ov") %>%
map2(datas, ~select(.y, one_of(.x)))
data_subsets_miss <- map(fits_miss, lavNames, "ov") %>%
map2(datas_miss, ~select(.y, one_of(.x)))
get_fitm <- function(fit){
fitm <- fitmeasures(fit)
fitm <- as_tibble(as.list(fitm))
}
fitm <- map(fits, get_fitm)
fitm_miss <- map(fits_miss, get_fitm)
fitm_miss_mean <- map(fits_miss_mean, get_fitm)
# write out
imap(data_subsets,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
imap(data_subsets_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
imap(pars_miss_mean,
~write_feather(.x, str_c("test/comparisons/", .y, "_par_mean.feather")))
imap(fitm,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm.feather")))
imap(fitm_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm_miss.feather")))
imap(fitm_miss_mean,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm_miss_mean.feather")))
pacman::p_load(stringr)
get_ingredients <- function(flour = NA, dough = NA){
if(!is.na(dough)){
flour <- (453/795)*dough
}
water <- 0.62*flour
water_ice <- 0.75*water
water_warm <- 0.25*water
yeast <- (7/453)*flour
malt <- 0.02*flour
salt <- 0.021*flour
st_yeast <- 0.2*(0.36/90)*flour
st_flour_water <- 0.2*(47/90)*flour
rec = str_c(c(
"Mehl", "Wasser kalt", "Wasser warm", "Hefe", "Malz", "Salz", "Poolish Hefe", "Poolish Wasser + Mehl"
), ": ",
round(c(flour, water_ice, water_warm, yeast, malt, salt, st_yeast, st_flour_water), digits = 2),
"\n"
)
print(cat(str_c(rec)))
}
get_ingredients(dough = 3*350)
