est_exp_2 <- map_dbl(exp_2, mean)
var_ber_01 <- map_dbl(ber_01, var)
sd_ber_01 <- map_dbl(ber_01, sd)
sd_ber_05 <- map_dbl(ber_05, sd)
sd_exp_01 <- map_dbl(exp_01, sd)
sd_exp_2 <- map_dbl(exp_2, sd)
?sample
#### bootstrap
sample(ber_01[[1]], size = 5, replace = TRUE)
#### bootstrap
mysamp <- function(vec, n){
samples = list()
for(i in 1:n){
samples[[i]] <- sample(vec, size = length(vec), replace = TRUE)
}
}
samples_ber <- map(ber_01, mysamp)
samples_ber <- map(ber_01, mysamp, n = 100)
samples_ber
samples_ber
samples_ber
ber_01[[1]]
length(ber_01[[1]])
#### bootstrap
mysamp <- function(vec, n){
samples = list()
for(i in 1:n){
samples[[i]] <- sample(vec, size = length(vec), replace = TRUE)
}
return(samples)
}
samples_ber <- map(ber_01, mysamp, n = 100)
samples_ber
map(samples_ber, ~map_dbl(.x, mean))
means_ber_01 <- map(samples_ber_01, ~map_dbl(.x, mean))
samples_ber_01 <- map(ber_01, mysamp, n = 100)
means_ber_01 <- map(samples_ber_01, ~map_dbl(.x, mean))
means_ber_01[[2]] %>% density %>% plot
means_ber_01[[3]] %>% density %>% plot
means_ber_01[[3]] %>% quantile
means_ber_01[[3]] %>% quantile(., probs = c(0.025, 0.975))
intervalls <- map(means_ber_01, quantile, probs = c(0.025, 0.975))
intervalls
ber_01 <- map(n, rbernoulli, p = 0.1)
ber_05 <- map(n, rbernoulli, p = 0.5)
exp_01 <- map(n, rexp, rate = 0.1)
exp_2 <- map(n, rexp, rate = 2)
est_ber_01 <- map_dbl(ber_01, mean)
est_ber_05 <- map_dbl(ber_05, mean)
est_exp_01 <- map_dbl(exp_01, mean)
est_exp_2 <- map_dbl(exp_2, mean)
sd_ber_01 <- map_dbl(ber_01, sd)
sd_ber_05 <- map_dbl(ber_05, sd)
sd_exp_01 <- map_dbl(exp_01, sd)
sd_exp_2 <- map_dbl(exp_2, sd)
#### bootstrap
mysamp <- function(vec, n){
samples = list()
for(i in 1:n){
samples[[i]] <- sample(vec, size = length(vec), replace = TRUE)
}
return(samples)
}
samples_ber_01 <- map(ber_01, mysamp, n = 100)
means_ber_01 <- map(samples_ber_01, ~map_dbl(.x, mean))
intervalls <- map(means_ber_01, quantile, probs = c(0.025, 0.975))
intervalls
#### bootstrap
meansamp <- function(vec, n){
means = c()
for(i in 1:n){
means[i] <- mean(sample(vec, size = length(vec), replace = TRUE))
}
return(means)
}
samples_ber_01 <- map(ber_01, meansamp, n = 100)
samples_ber_01
samples_ber_01 <- map(ber_01, meansamp, n = 1000)
samples_ber_01
means_ber_01 <- map(ber_01, meansamp, n = 1000)
intervalls <- map(means_ber_01, quantile, probs = c(0.025, 0.975))
intervalls
for(i in 1:1000){
sample = rbernoulli(100, p = 0.1)
means <- meansamp(sample, 2000)
quant = quantile(means, probs = c(0.025, 0.975))
low_int[i] = quant[1]
up_int[i] = quant[2]
}
low_int <- c()
up_int <- c()
for(i in 1:1000){
sample = rbernoulli(100, p = 0.1)
means <- meansamp(sample, 2000)
quant = quantile(means, probs = c(0.025, 0.975))
low_int[i] = quant[1]
up_int[i] = quant[2]
}
sum((low_int < 0.1)&(up_int > 0.1))
sum((low_int < 0.1)&(up_int > 0.1))/1000
?rnorm
2*pnorm(1.96)
2*pnorm(1.96)-1
ci_normal <- function(vec, alpha){
z_beta <- qnorm(1-alpha/2)
interval = c()
interval[1] <- (-z_beta*sd(vec)/sqrt(length(vec)))
interval[2] <- interval[1]*(-1)
interval <- interval + mean(vec)
}
ci_normal(ber_01[[1]])
ci_normal(ber_01[[1]], .05)
ci_normal <- function(vec, alpha){
z_beta <- qnorm(1-alpha/2)
interval = c()
interval[1] <- (-z_beta*sd(vec)/sqrt(length(vec)))
interval[2] <- interval[1]*(-1)
interval <- interval + mean(vec)
return(interval)
}
ci_normal(ber_01[[1]], .05)
intervalls[[1]]
intervalls[[2]]
ci_normal(ber_01[[2]], .05)
ci_normal(ber_01[[3]], .05)
intervalls[[3]]
for(i in 1:1000){
sample = rbernoulli(100, p = 0.1)
interval = ci_normal(sample, 0.05)
low_int[i] = interval[1]
up_int[i] = interval[2]
}
sum((low_int < 0.1)&(up_int > 0.1))/1000
low_int
up_int
low_int %>% density %>% plot
low_int <- low_int[(low_int < 0.1)&(up_int > 0.1)]
up_int <- up_int[(low_int < 0.1)&(up_int > 0.1)]
low_int <- c()
up_int <- c()
for(i in 1:1000){
sample = rbernoulli(100, p = 0.1)
interval = ci_normal(sample, 0.05)
low_int[i] = interval[1]
up_int[i] = interval[2]
}
sum((low_int < 0.1)&(up_int > 0.1))/1000
low_int_cor <- low_int[(low_int < 0.1)&(up_int > 0.1)]
up_int_cor <- up_int[(low_int < 0.1)&(up_int > 0.1)]
low_int %>% density %>% plot
p-low_int_cor %>% density
0.1-low_int_cor %>% density
(0.1-low_int_cor) %>% density
(0.1-low_int_cor) %>% hist()
for(i in 1:10000){
sample = rbernoulli(100, p = 0.1)
interval = ci_normal(sample, 0.05)
low_int[i] = interval[1]
up_int[i] = interval[2]
}
low_int %>% density %>% plot
low_int_cor <- low_int[(low_int < 0.1)&(up_int > 0.1)]
up_int_cor <- up_int[(low_int < 0.1)&(up_int > 0.1)]
(0.1-low_int_cor) %>% hist()
up_int_cor - low_int_cor
(up_int_cor - low_int_cor) %>% density()
(up_int_cor - low_int_cor) %>% density %>% plot
conf <- data.frame(low = low_int_cor, up = up_int_cor)
conf <- mutate(conf, quart = pmap(conf, function(a,b)(1/4)*(b-a)))
conf <- mutate(conf, quart = pmap(conf, function(low,up)(1/4)*(up-low)))
conf$quart
conf <- mutate(conf, quart = pmap_dbl(conf, function(low,up)(1/4)*(up-low)))
conf <- data.frame(low = low_int_cor, up = up_int_cor)
conf <- mutate(conf, quart = pmap_dbl(conf, function(low,up)(1/4)*(up-low)))
conf$quart
conf <- mutate(conf, low_small = low + quart, up_small = up-quart)
conf %>% filter(low_small < 0.1, up_small > 0.1) %>% nrow()
sum((low_int < 0.1)&(up_int > 0.1))/1000
sum((low_int < 0.1)&(up_int > 0.1))/10000
6688/10000
0.6688*2
0.9325 - 0.6688
library(tidyverse)
n <- c(5, 20, 100)
par <- c(0.1, 0.5, 0.1, 2)
expand_grid(par, n)
spec <- expand_grid(par, n)
spec$dist <- c(rep("rbernoulli", 6), rep("rexp", 6))
spec$dist
spec
?do.call
do.call("rnorm", 200)
do.call("rnorm", list(n = 200))
spec
list("n" = 5)
list(n = 5)
spec$parname <- c(rep("p", 6), rep("rate", 6))
spec
pmap(spec, do.call(..3, list(n = ..2, ..4 = ..1)))
pmap(spec, ~do.call(..3, list(n = ..2, ..4 = ..1)))
pmap(spec, ~do.call(..3, list(n = ..2, !!..4 = ..1)))
pmap(spec, ~do.call(..3, list(n = ..2, !!..4 := ..1)))
library(tidyverse, rlang)
pmap(spec, ~do.call(..3, list(n = ..2, !!..4 := ..1)))
name = "n"
list(name = 5)
list(!!name = 5)
list(!!name := 5)
pmap(spec, ~invoke(..3, list(n = ..2, ..4 = ..1)))
pmap(spec, ~invoke(..3, list(n = ..2, !!..4 = ..1)))
pmap(spec, ~invoke(..3, list(n = ..2, !!..4 := ..1)))
?:=
?`:=`
n <- c(5, 20, 100)
p <- c(0.1, 0.5)
rate <- c(0.1, 2)
bern <- expand_grid(p, n)
exp <- expand_grin(rate, n)
exp <- expand_grid(rate, n)
?with
bern
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
library(tidyverse, rlang, magrittr)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
pacman::p_load(tidyverse, rlang, magrittr)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
list(name = 5)
list(name := 5)
list(!!name := 5)
list(!!enquote(name) := 5)
sym(name)
list(sym(name) = 5)
list(sym(name) := 5)
list(!!sym(name) := 5)
myf <- function(name){
name = sym(name)
list(!!name = 5)
}
myf <- function(name){
name = sym(name)
list(!!name := 5)
}
myf(name)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
exp %<>% mutate(data = pmap(exp, ~rexp(rate = ..1, n = ..2)))
bern %>% View()
bern %<>% mutate(mean = map_dbl(data, mean))
exp %<>% mutate(mean = map_dbl(data, mean))
bern
exp
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern <- expand_grid(p, n)
exp <- expand_grid(rate, n)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
exp %<>% mutate(data = pmap(exp, ~rexp(rate = ..1, n = ..2)))
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
exp %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern %<>% mutate(mean = map_dbl(data, ~mean),
sd = map_dbl(data, ~sd))
bern <- expand_grid(p, n)
exp <- expand_grid(rate, n)
bern %<>% mutate(data = pmap(bern, ~rbernoulli(p = ..1, n = ..2)))
exp %<>% mutate(data = pmap(exp, ~rexp(rate = ..1, n = ..2)))
bern %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
exp %<>% mutate(mean = map_dbl(data, mean),
sd = map_dbl(data, sd))
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000))
#### bootstrap
meansamp <- function(vec, n){
means = c()
for(i in 1:n){
means[i] <- mean(sample(vec, size = length(vec), replace = TRUE))
}
return(means)
}
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000))
bern
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000))
exp
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_int = map(boot_means, quantile, probs = c(0.025, 0.975)))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_int = map(boot_means, quantile, probs = c(0.025, 0.975)))
bern
bern$boot_int[[1]]
knitr::kable(exp)
knitr::kable(exp %>% select(boot_int))
knitr::kable(bern %>% select(boot_int))
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)))
ci_normal <- function(vec, alpha){
z_beta <- qnorm(1-alpha/2)
interval = c()
interval[1] <- (-z_beta*sd(vec)/sqrt(length(vec)))
interval[2] <- interval[1]*(-1)
interval <- interval + mean(vec)
return(interval)
}
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
?ci_normal
ci_normal
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
bern
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knittr::kable()
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable()
?knitr::kable()
knitr::opts_chunk$set(echo = TRUE)
set.seed(12132)
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable(digits = 2)
# Show results ------------------------------------------------------------
bern %<>% mutate(boot_ci = map(boot_ci, round),
norm_ci = map(norm_ci, round))
exp %<>% mutate(boot_ci = map(boot_ci, round),
norm_ci = map(norm_ci, round))
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable()
bern %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
exp %<>% mutate(boot_means = map(data, meansamp, n = 2000),
boot_ci = map(boot_means, quantile, probs = c(0.025, 0.975)),
norm_ci = map(data, ci_normal, 0.05))
# Show results ------------------------------------------------------------
bern %<>% mutate(boot_ci = map(boot_ci, round, digits = 2),
norm_ci = map(norm_ci, round, digits = 2))
exp %<>% mutate(boot_ci = map(boot_ci, round, digits = 2),
norm_ci = map(norm_ci, round, digits = 2))
bern %>% select(p, n, mean, sd, boot_ci, norm_ci) %>% knitr::kable()
matrix(0,0,0)
sigma <- matrix(rnorm(36), ncol = 6)
View(sigma)
sigma <- sigma%*%t(sigma)
View(sigma)
chol(sigma)
sigma <- matrix(rnorm(36), ncol = 6)
chol(sigma)
sigma <- sigma%*%t(sigma)
chol(sigma)
test <- sigma
rm.ind <- c(2,3)
sigma[rm.ind, -rm.ind]
sigma
?crossprod
?solve
?`[`
sigma[rm.ind, -rm.ind, drop = FALSE]
?crossprod
?sample
induce_missing <- function(v, p){
miss <- sample(c(0,1), length(v), replace = TRUE, prob = c(1-p, p))
ifelse(miss, NA, v)
}
vec <- rep(1, 100)
induce_missing(vec)
induce_missing(vec, .5)
induce_missing(vec, .5) %>% sum(na.rm = T)
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark)
induce_missing(vec, .5) %>% sum(na.rm = T)
vignette("colweise")
vignette("colwise")
three_path_dat_miss20 <- mutate(PoliticalDemocracy, across(induce_missing))
three_path_dat_miss20 <- mutate(PoliticalDemocracy,
across(everything(),induce_missing))
three_path_dat_miss20 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.2)))
three_path_dat_miss20
three_path_dat_miss30 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.3)))
three_path_dat_miss50 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.5)))
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1",
three_path_2 =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_loadeq =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy))
datas[[4]]$group = c(rep("1", 25), rep("2", 25), rep("3", 25))
datas[[5]]$group = c(rep("1", 40), rep("2", 40), rep("3", 70))
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T))
all_equal = c("loadings", "residuals", "residual.covariances", "lv.variances",
"lv.covariances", "regressions")
fits[[4]] <- cfa(models[[4]], datas[[4]], group = "group", group.equal = all_equal,
meanstructure = FALSE)#c("loadings"))
fits[[5]] <- cfa(models[[5]], datas[[5]], group = "group", group.equal = c("loadings",
"regressions"),
meanstructure = FALSE)
induce_missing <- function(v, p){
miss <- sample(c(0,1), length(v), replace = TRUE, prob = c(1-p, p))
ifelse(miss, NA, v)
}
three_path_dat_miss20 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.2)))
three_path_dat_miss30 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.3)))
three_path_dat_miss50 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.5)))
datas_miss <- list(three_path_dat_miss20, three_path_dat_miss30, three_path_dat_miss50)
fits_miss <- map(data_miss, ~cfa(models[[2]], data = .x, missing = "FIML",
meanstructure = FALSE))
fits_miss <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML",
meanstructure = FALSE))
fits_miss[1]
fits_miss[2]
fits_miss[3]
microbenchmark(cfa(models[["three_path"]], datas_miss[[1]], missing = "FIML"))
get_testpars <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est, se, p = pvalue, z)
}
pars <- map(fits, get_testpars)
pars_miss <- map(fits_miss, get_testpars)
data_subsets <- map(fits, lavNames, "ov") %>%
map2(datas, ~select(.y, one_of(.x)))
data_subsets_miss <- map(fits_miss, lavNames, "ov") %>%
map2(datas_miss, ~select(.y, one_of(.x)))
imap(data_subsets,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
r"(...)"
r"(C:\Users\maxim\.julia\dev\sem)"
setwd(r"(C:\Users\maxim\.julia\dev\sem)")
imap(data_subsets,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
imap(data_subsets_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
datas_miss <- list(
dat_miss20 = three_path_dat_miss20,
dat_miss30 = three_path_dat_miss30,
dat_miss50 = three_path_dat_miss50)
data_subsets_miss <- map(fits_miss, lavNames, "ov") %>%
map2(datas_miss, ~select(.y, one_of(.x)))
imap(data_subsets_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
fits_miss <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML"))
data_subsets_miss <- map(fits_miss, lavNames, "ov") %>%
map2(datas_miss, ~select(.y, one_of(.x)))
imap(data_subsets_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
pars_miss <- map(fits_miss, get_testpars)
imap(pars_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
